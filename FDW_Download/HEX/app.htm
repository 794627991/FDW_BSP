<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\FDW_Download\HEX\app.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\FDW_Download\HEX\app.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Feb 08 16:47:47 2021
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
uCOS_TaskLED &rArr; showtemptable &rArr; GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[cd]">__user_initial_stackheap</a>
 <LI><a href="#[34a]">CPU_IntDis</a>
 <LI><a href="#[34b]">CPU_IntEn</a>
 <LI><a href="#[d2]">CPU_SR_Save</a>
 <LI><a href="#[d6]">CPU_SR_Restore</a>
 <LI><a href="#[34c]">CPU_WaitForInt</a>
 <LI><a href="#[34d]">CPU_WaitForExcept</a>
 <LI><a href="#[8a]">OSStartHighRdy</a>
 <LI><a href="#[232]">OSCtxSw</a>
 <LI><a href="#[230]">OSIntCtxSw</a>
 <LI><a href="#[18]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">NMI_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[2d]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">AES_IRQHandler</a><BR>
 <LI><a href="#[2de]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2de]">cJSON_Delete</a><BR>
 <LI><a href="#[301]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e5]">parse_value</a><BR>
 <LI><a href="#[2fd]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e5]">parse_value</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from interrupt_api.o(i.ADC_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2d]">AES_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[4f]">App_TaskIdleHook</a> from ucosinit.o(i.App_TaskIdleHook) referenced from ucosinit.o(i.uCOS_Start)
 <LI><a href="#[32]">BTIM1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[33]">BTIM2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[31]">COMP_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[34]">ETIM1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[35]">ETIM2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[36]">ETIM3_IRQHandler</a> from interrupt_api.o(i.ETIM3_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[37]">ETIM4_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1e]">FDET_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[38]">GPIO_IRQHandler</a> from interrupt_api.o(i.GPIO_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[66]">GUIMONO_DispChar</a> from guicharm.o(i.GUIMONO_DispChar) referenced 2 times from f4x6.o(.constdata)
 <LI><a href="#[67]">GUIMONO_GetCharDistX</a> from guicharm.o(i.GUIMONO_GetCharDistX) referenced 2 times from f4x6.o(.constdata)
 <LI><a href="#[68]">GUIMONO_GetFontInfo</a> from guicharm.o(i.GUIMONO_GetFontInfo) referenced 2 times from f4x6.o(.constdata)
 <LI><a href="#[69]">GUIMONO_IsInFont</a> from guicharm.o(i.GUIMONO_IsInFont) referenced 2 times from f4x6.o(.constdata)
 <LI><a href="#[20]">HSPI_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from ucosinit.o(i.HardFault_Handler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2b]">I2C_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2c]">LCD_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2e]">LPTIM_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[39]">LPUART_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1d]">NVMIF_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[18]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[19]">OS_CPU_SysTickHandler</a> from os_cpu_c.o(i.OS_CPU_SysTickHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[41]">OS_IdleTask</a> from os_core.o(i.OS_IdleTask) referenced from os_core.o(i.OS_IdleTaskInit)
 <LI><a href="#[42]">OS_StatTask</a> from os_stat.o(i.OS_StatTask) referenced from os_stat.o(i.OS_StatTaskInit)
 <LI><a href="#[40]">OS_TaskReturn</a> from os_task.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[1c]">RTC_IRQHandler</a> from interrupt_api.o(i.RTC_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[21]">SPI1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[22]">SPI2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1b]">SVD_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_fm33g0xx_app.o(i.SystemInit) referenced from startup_fm33g0xx.o(.text)
 <LI><a href="#[29]">U78160_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2a]">U78161_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[23]">UART0_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[24]">UART1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[25]">UART2_IRQHandler</a> from interrupt_api.o(i.UART2_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[26]">UART3_IRQHandler</a> from interrupt_api.o(i.UART3_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[27]">UART4_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[28]">UART5_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[30]">WKUP_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1a]">WWDT_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[64]">_CalcSizeOfChar</a> from gui_uc_encodenone.o(i._CalcSizeOfChar) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[65]">_Encode</a> from gui_uc_encodenone.o(i._Encode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[62]">_GetCharCode</a> from gui_uc_encodenone.o(i._GetCharCode) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[63]">_GetCharSize</a> from gui_uc_encodenone.o(i._GetCharSize) referenced from gui_uc_encodenone.o(.constdata)
 <LI><a href="#[6a]">__main</a> from __main.o(!!!main) referenced from startup_fm33g0xx.o(.text)
 <LI><a href="#[13]">__myfree</a> from malloc.o(i.__myfree) referenced 2 times from cjson.o(.data)
 <LI><a href="#[12]">__mymallocpro</a> from malloc.o(i.__mymallocpro) referenced 2 times from cjson.o(.data)
 <LI><a href="#[3d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[58]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[3e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3c]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[5f]">bc260OberveSend</a> from iot_bc260.o(i.bc260OberveSend) referenced from iot_bc260.o(.constdata)
 <LI><a href="#[60]">bc260OneNetojb1Rec</a> from iot_bc260.o(i.bc260OneNetojb1Rec) referenced from iot_bc260.o(.constdata)
 <LI><a href="#[61]">bc260OneNetojb2Rec</a> from iot_bc260.o(i.bc260OneNetojb2Rec) referenced from iot_bc260.o(.constdata)
 <LI><a href="#[5e]">bc260SendCoapIPort</a> from iot_bc260.o(i.bc260SendCoapIPort) referenced from iot_bc260.o(.constdata)
 <LI><a href="#[5b]">bc260SendUdpTcpIpPort</a> from iot_bc260.o(i.bc260SendUdpTcpIpPort) referenced from iot_bc260.o(.constdata)
 <LI><a href="#[47]">bc260coapsend</a> from iot_bc260.o(i.bc260coapsend) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[4c]">bc260faildo</a> from iot_bc260.o(i.bc260faildo) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[59]">bc260iotRst</a> from iot_bc260.o(i.bc260iotRst) referenced 3 times from iot_bc260.o(.constdata)
 <LI><a href="#[48]">bc260onetsend</a> from iot_bc260.o(i.bc260onetsend) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[4b]">bc260rxanaly</a> from iot_bc260.o(i.bc260rxanaly) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[5a]">bc260rxdeal</a> from iot_bc260.o(i.bc260rxdeal) referenced 29 times from iot_bc260.o(.constdata)
 <LI><a href="#[49]">bc260tcpsend</a> from iot_bc260.o(i.bc260tcpsend) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[4a]">bc260udpsend</a> from iot_bc260.o(i.bc260udpsend) referenced from iot_bc260.o(i.bc260getcmd)
 <LI><a href="#[3f]">fputc</a> from myprintf.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[46]">iic_op_scl</a> from iic_api.o(i.iic_op_scl) referenced from iic_api.o(i.SIMLT_I2C_OP_INIT)
 <LI><a href="#[45]">iic_op_sda_in</a> from iic_api.o(i.iic_op_sda_in) referenced from iic_api.o(i.SIMLT_I2C_OP_INIT)
 <LI><a href="#[44]">iic_op_sda_out</a> from iic_api.o(i.iic_op_sda_out) referenced from iic_api.o(i.SIMLT_I2C_OP_INIT)
 <LI><a href="#[43]">iic_op_sda_set</a> from iic_api.o(i.iic_op_sda_set) referenced from iic_api.o(i.SIMLT_I2C_OP_INIT)
 <LI><a href="#[5d]">iotEnd</a> from iotnew_api.o(i.iotEnd) referenced 3 times from iot_bc260.o(.constdata)
 <LI><a href="#[5c]">iotSend</a> from iotnew_api.o(i.iotSend) referenced 3 times from iot_bc260.o(.constdata)
 <LI><a href="#[10]">mem_init</a> from malloc.o(i.mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[11]">mem_perused</a> from malloc.o(i.mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[55]">uCOS_APP_Uart2</a> from main.o(i.uCOS_APP_Uart2) referenced from ucosinit.o(i.uCOS_TaskUart2)
 <LI><a href="#[56]">uCOS_APP_Uart3</a> from main.o(i.uCOS_APP_Uart3) referenced from ucosinit.o(i.uCOS_TaskUart3)
 <LI><a href="#[51]">uCOS_TaskClock</a> from ucosinit.o(i.uCOS_TaskClock) referenced from ucosinit.o(i.uCOS_TaskCreate)
 <LI><a href="#[52]">uCOS_TaskIO</a> from ucosinit.o(i.uCOS_TaskIO) referenced from ucosinit.o(i.uCOS_TaskCreate)
 <LI><a href="#[4d]">uCOS_TaskLED</a> from event.o(i.uCOS_TaskLED) referenced from event.o(i.uCOS_LEDCreate)
 <LI><a href="#[4e]">uCOS_TaskNB</a> from event.o(i.uCOS_TaskNB) referenced from event.o(i.uCOS_NBTaskCreate)
 <LI><a href="#[50]">uCOS_TaskStart</a> from ucosinit.o(i.uCOS_TaskStart) referenced from ucosinit.o(i.uCOS_Start)
 <LI><a href="#[53]">uCOS_TaskUart2</a> from ucosinit.o(i.uCOS_TaskUart2) referenced from ucosinit.o(i.uCOS_TaskCreate)
 <LI><a href="#[54]">uCOS_TaskUart3</a> from ucosinit.o(i.uCOS_TaskUart3) referenced from ucosinit.o(i.uCOS_TaskCreate)
 <LI><a href="#[57]">uCOS_Taskyasuo</a> from event.o(i.uCOS_Taskyasuo) referenced from event.o(i.yasuotest)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6d]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[325]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[326]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[327]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[9b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6e]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[71]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[73]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[74]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[76]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[78]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[82]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[328]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[329]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[32a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[32b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[32c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[32e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[32f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[330]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[331]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[332]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[333]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[334]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[335]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[336]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[337]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[338]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[339]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[33a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[33b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[33c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[33d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[33e]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[33f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[340]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[341]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[342]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[343]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[344]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[6c]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[345]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[346]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[83]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Sysinit_Exp &rArr; Uart_Init_Macro &rArr; API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[347]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[cf]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[348]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[88]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260getcmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[349]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>ETIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ETIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ETIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>HSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>NVMIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>U78160_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>U78161_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34a]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[d6]"></a>CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[34c]"></a>CPU_WaitForInt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>CPU_WaitForExcept</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu_a.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSStartHighRdy &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[232]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[230]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[18]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_CPU_PendSVHandler &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[34e]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[8e]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxDeal
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[90]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>

<P><STRONG><a name="[93]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[94]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[92]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[72]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[34f]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2db]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Uart3
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxanaly
</UL>

<P><STRONG><a name="[30b]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
</UL>

<P><STRONG><a name="[2e8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>

<P><STRONG><a name="[304]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetTime
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPReduceZero
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRecDat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_RTC_Get
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxanaly
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[350]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>memset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memset
</UL>

<P><STRONG><a name="[a0]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[9f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPReduceZero
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxanaly
</UL>

<P><STRONG><a name="[351]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[352]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2d8]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260faildo
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[353]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_perused
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudREG_Calc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[354]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLeap
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckYInterSect
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index_1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[355]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[356]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[a3]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a6]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[a7]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[293]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[a9]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[a8]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[300]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[357]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[358]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[359]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
</UL>

<P><STRONG><a name="[35a]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[35b]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[35c]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[ae]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[ad]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[35d]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
</UL>

<P><STRONG><a name="[35e]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[35f]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[b2]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[b4]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[98]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[362]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[91]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[3c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[77]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[79]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[8f]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[97]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[c0]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[2cc]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[30a]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[c3]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[363]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[364]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[365]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bc]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[b6]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b9]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c8]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[b8]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[bf]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c1]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[c2]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[c4]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[80]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[85]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cb]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[367]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>ADC_Exp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, api_exp.o(i.ADC_Exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ADC_Exp &rArr; API_ADC &rArr; G_CloseeADIO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1s
</UL>

<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, interrupt_api.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = ADC_IRQHandler &rArr; OSIntExit &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>ADC_IRQ_CallBack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adc_api.o(i.ADC_IRQ_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQ_CallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFEN_Setable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCIF_ADC_IF_Clr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCDATA_Read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_IE_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_EN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>ANAC_ADCCON_ADC_EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCCON_ADC_EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
</UL>

<P><STRONG><a name="[db]"></a>ANAC_ADCCON_ADC_IE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCCON_ADC_IE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
</UL>

<P><STRONG><a name="[e0]"></a>ANAC_ADCCON_ADC_VANA_EN_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCCON_ADC_VANA_EN_Set))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
</UL>

<P><STRONG><a name="[da]"></a>ANAC_ADCDATA_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCDATA_Read))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
</UL>

<P><STRONG><a name="[d9]"></a>ANAC_ADCIF_ADC_IF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCIF_ADC_IF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
</UL>

<P><STRONG><a name="[e2]"></a>ANAC_ADCINSEL_BUFBYP_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCINSEL_BUFBYP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
</UL>

<P><STRONG><a name="[dd]"></a>ANAC_ADCINSEL_BUFEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCINSEL_BUFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_CallBack
</UL>

<P><STRONG><a name="[e3]"></a>ANAC_ADCINSEL_BUFSEL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCINSEL_BUFSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
</UL>

<P><STRONG><a name="[ef]"></a>ANAC_ADCTRIM_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCTRIM_Read))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
</UL>

<P><STRONG><a name="[e1]"></a>ANAC_ADCTRIM_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_ADCTRIM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
</UL>

<P><STRONG><a name="[de]"></a>ANAC_ADC_Channel_SetEx</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, fm33g0xx_anac.o(i.ANAC_ADC_Channel_SetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ANAC_ADC_Channel_SetEx &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCTRIM_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFEN_Setable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFSEL_Set
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFBYP_Setable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_VANA_EN_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
</UL>

<P><STRONG><a name="[e4]"></a>ANAC_ADC_TemperatureCalc</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, fm33g0xx_anac.o(i.ANAC_ADC_TemperatureCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ANAC_ADC_TemperatureCalc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
</UL>

<P><STRONG><a name="[ee]"></a>ANAC_ADC_VoltageCalc</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, fm33g0xx_anac.o(i.ANAC_ADC_VoltageCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ANAC_ADC_VoltageCalc &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCTRIM_Read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
</UL>

<P><STRONG><a name="[1f8]"></a>ANAC_BORCON_OFF_BOR_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_BORCON_OFF_BOR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[291]"></a>ANAC_FDETIF_FDETIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_FDETIF_FDETIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[290]"></a>ANAC_FDETIF_FDETIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_FDETIF_FDETIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[28f]"></a>ANAC_FDETIF_FDETO_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_FDETIF_FDETO_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[1f7]"></a>ANAC_PDRCON_PDREN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_PDRCON_PDREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[d1]"></a>API_ADC</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, adc_api.o(i.API_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = API_ADC &rArr; G_CloseeADIO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_VoltageCalc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFEN_Setable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_IE_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_EN_Setable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CloseeADIO
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Exp
</UL>

<P><STRONG><a name="[f4]"></a>API_ETim_ReSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, etim_api.o(i.API_ETim_ReSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_ETim_ReSet
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_TimSet
</UL>

<P><STRONG><a name="[f6]"></a>API_Etim_Init</STRONG> (Thumb, 162 bytes, Stack size 88 bytes, etim_api.o(i.API_Etim_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_Etim_Init &rArr; NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_TimSet
</UL>

<P><STRONG><a name="[fa]"></a>API_GPIO_Judge</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, system.o(i.API_GPIO_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = API_GPIO_Judge &rArr; GPIO_EXTI_EXTIxIF_ChkEx_Ucos
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIxIF_ChkEx_Ucos
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_IO
</UL>

<P><STRONG><a name="[fe]"></a>API_GetTime</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rtc_api.o(i.API_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = API_GetTime &rArr; GY_RTC_Get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_RTC_Get
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1s
</UL>

<P><STRONG><a name="[101]"></a>API_I2C_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, iic_api.o(i.API_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = API_I2C_Init &rArr; AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIE_Setable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CERR_ERRIE_Setable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CBRG_Write
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BaudREG_Calc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[107]"></a>API_I2C_Read_Com</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, iic_api.o(i.API_I2C_Read_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = API_I2C_Read_Com &rArr; G_Sendaddr &rArr; G_I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CSTA_ACKDT_Set
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Receive_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[10c]"></a>API_I2C_Write_Com</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, iic_api.o(i.API_I2C_Write_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = API_I2C_Write_Com &rArr; G_Sendaddr &rArr; G_I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Wait_for_end
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[10f]"></a>API_RTC_Init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, rtc_api.o(i.API_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = API_RTC_Init &rArr; API_SetTIME &rArr; GY_IsLegal &rArr; Check_date &rArr; isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_STAMPEN_STAMP1EN_Setable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_STAMPEN_STAMP0EN_Setable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCIE_SetableEx
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_PR1SEN_PR1SEN_Setable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_FSEL_FSEL_Set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_RTC_Get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_IsLegal
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init_Exp
</UL>

<P><STRONG><a name="[119]"></a>API_SIMLT_I2C_Read_Com</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, iic_api.o(i.API_SIMLT_I2C_Read_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_SIMLT_I2C_Read_Com &rArr; SIMLT_I2C_OP &rArr; SendByte &rArr; TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2c
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
</UL>

<P><STRONG><a name="[11d]"></a>API_SIMLT_I2C_Write_Com</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, iic_api.o(i.API_SIMLT_I2C_Write_Com))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_SIMLT_I2C_Write_Com &rArr; SIMLT_I2C_OP &rArr; SendByte &rArr; TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2c
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_Wait_for_end
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
</UL>

<P><STRONG><a name="[2a5]"></a>API_SaveAdr_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, api_exp.o(i.API_SaveAdr_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>

<P><STRONG><a name="[118]"></a>API_SetTIME</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, rtc_api.o(i.API_SetTIME))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = API_SetTIME &rArr; GY_IsLegal &rArr; Check_date &rArr; isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCWE_Write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_RTC_Get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_IsLegal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[122]"></a>API_Temperature</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, adc_api.o(i.API_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = API_Temperature &rArr; ANAC_ADC_TemperatureCalc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCINSEL_BUFEN_Setable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_IE_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_EN_Setable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Exp
</UL>

<P><STRONG><a name="[123]"></a>API_TimSet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uarttimeout.o(i.API_TimSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = API_TimSet &rArr; API_Etim_Init &rArr; NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ETim_ReSet
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>API_UART_It_End</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_api.o(i.API_UART_It_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_UART_It_End
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
</UL>

<P><STRONG><a name="[126]"></a>API_UART_It_Send</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, uart_api.o(i.API_UART_It_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Start
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uart_Send
</UL>

<P><STRONG><a name="[12a]"></a>API_UART_It_Start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart_api.o(i.API_UART_It_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = API_UART_It_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXREG_Write
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
</UL>

<P><STRONG><a name="[12c]"></a>API_UART_Rx_Queue_Get_Do</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart_api.o(i.API_UART_Rx_Queue_Get_Do))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = API_UART_Rx_Queue_Get_Do &rArr; __DelComMessage &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DelComMessage
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsEmpty
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskUart3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskUart2
</UL>

<P><STRONG><a name="[130]"></a>API_UART_Rx_Queue_Send</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart_api.o(i.API_UART_Rx_Queue_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = API_UART_Rx_Queue_Send &rArr; __myrealloc &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myrealloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComMessage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3TimCallBack
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TimCallBack
</UL>

<P><STRONG><a name="[134]"></a>API_UART_SEND</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uart_api.o(i.API_UART_SEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uart_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FooSend
</UL>

<P><STRONG><a name="[135]"></a>API_Uart_Send</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, uart_api.o(i.API_Uart_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXREG_Write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUFSTA_TXFF_Chk
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_SEND
</UL>

<P><STRONG><a name="[138]"></a>API_Uartx_Init</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, uart_api.o(i.API_Uartx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_IREN_Setable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_Macro
</UL>

<P><STRONG><a name="[140]"></a>Ack_I2c</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic_api.o(i.Ack_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ack_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByte
</UL>

<P><STRONG><a name="[102]"></a>AltFunIO</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, system.o(i.AltFunIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
</UL>

<P><STRONG><a name="[143]"></a>AnalogIO</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, system.o(i.AnalogIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
</UL>

<P><STRONG><a name="[4f]"></a>App_TaskIdleHook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ucosinit.o(i.App_TaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = App_TaskIdleHook &rArr; OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_LowPower
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_Start)
</UL>
<P><STRONG><a name="[2dc]"></a>AsciiToHex</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, convert.o(i.AsciiToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxanaly
</UL>

<P><STRONG><a name="[100]"></a>BCDtoHEX</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, convert.o(i.BCDtoHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BCDtoHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_IsLegal
</UL>

<P><STRONG><a name="[149]"></a>CPU_CntLeadZeros</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, cpu_core.o(i.CPU_CntLeadZeros))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros32
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>

<P><STRONG><a name="[14a]"></a>CPU_CntLeadZeros32</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_CntLeadZeros32))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>

<P><STRONG><a name="[14b]"></a>CPU_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_Init &rArr; CPU_IntDisMeasInit &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Start
</UL>

<P><STRONG><a name="[14e]"></a>CPU_IntDisMeasMaxCurGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
</UL>

<P><STRONG><a name="[150]"></a>CPU_IntDisMeasMaxCurReset</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCurReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[151]"></a>CPU_IntDisMeasMaxGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasMaxGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasMaxGet
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[d3]"></a>CPU_IntDisMeasStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_IntDisMeasStart
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[d5]"></a>CPU_IntDisMeasStop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_IntDisMeasStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[239]"></a>CPU_StatReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_StatReset))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
</UL>

<P><STRONG><a name="[153]"></a>CPU_TS_TmrInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ucosinit.o(i.CPU_TS_TmrInit))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_Init
</UL>

<P><STRONG><a name="[152]"></a>CPU_TS_TmrRd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ucosinit.o(i.CPU_TS_TmrRd))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[154]"></a>CharToBety</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, convert.o(i.CharToBety))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CharToBety
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[155]"></a>CharToHex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, convert.o(i.CharToHex))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToBety
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[156]"></a>Check_date</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rtc_api.o(i.Check_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Check_date &rArr; isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isLeap
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_IsLegal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[158]"></a>Close_AllIO_GPIO_80pin</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system.o(i.Close_AllIO_GPIO_80pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Close_AllIO_GPIO_80pin &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[15a]"></a>CloseeIO</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(i.CloseeIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CloseeADIO
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
</UL>

<P><STRONG><a name="[15e]"></a>ET12_32bit</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, system.o(i.ET12_32bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ET12_32bit &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCosTimer
</UL>

<P><STRONG><a name="[36]"></a>ETIM3_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, interrupt_api.o(i.ETIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ETIM3_IRQHandler &rArr; UartTimeOut &rArr; Uart3TimCallBack &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTimeOut
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIF_OVIF_Clr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIF_OVIF_Chk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>ETIMx_ETxCMP_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCMP_Write))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[174]"></a>ETIMx_ETxCR_CAPCLR_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPCLR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[176]"></a>ETIMx_ETxCR_CAPEDGE_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPEDGE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[173]"></a>ETIMx_ETxCR_CAPMOD_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPMOD_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxCR_CAPMOD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[175]"></a>ETIMx_ETxCR_CAPONCE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPONCE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[170]"></a>ETIMx_ETxCR_CASEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CASEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[f5]"></a>ETIMx_ETxCR_CEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ETim_ReSet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTimeOut
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ET12_32bit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxCapture
</UL>

<P><STRONG><a name="[171]"></a>ETIMx_ETxCR_EDGESEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_EDGESEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxCR_EDGESEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[16e]"></a>ETIMx_ETxCR_EXFLT_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_EXFLT_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[16f]"></a>ETIMx_ETxCR_MOD_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_MOD_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxCR_MOD_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[172]"></a>ETIMx_ETxCR_PWM_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_PWM_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[17a]"></a>ETIMx_ETxIE_CAPIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_CAPIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[179]"></a>ETIMx_ETxIE_CMPIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_CMPIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[17b]"></a>ETIMx_ETxIE_OVIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_OVIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[165]"></a>ETIMx_ETxIF_CAPIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIF_CAPIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxCapture
</UL>

<P><STRONG><a name="[164]"></a>ETIMx_ETxIF_CAPIF_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIF_CAPIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxCapture
</UL>

<P><STRONG><a name="[160]"></a>ETIMx_ETxIF_OVIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIF_OVIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>ETIMx_ETxIF_OVIF_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIF_OVIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
</UL>

<P><STRONG><a name="[16a]"></a>ETIMx_ETxINSEL_GRP1SEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_GRP1SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[16b]"></a>ETIMx_ETxINSEL_GRP2SEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_GRP2SEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxINSEL_GRP2SEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[168]"></a>ETIMx_ETxINSEL_SIG1SEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_SIG1SEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxINSEL_SIG1SEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[169]"></a>ETIMx_ETxINSEL_SIG2SEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_SIG2SEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[166]"></a>ETIMx_ETxIVR_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIVR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxCapture
</UL>

<P><STRONG><a name="[177]"></a>ETIMx_ETxIVR_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIVR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[16c]"></a>ETIMx_ETxPESCALE1_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxPESCALE1_Write))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[16d]"></a>ETIMx_ETxPESCALE2_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxPESCALE2_Write))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[f9]"></a>ETIMx_Init</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, fm33g0xx_etim.o(i.ETIMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxPESCALE1_Write
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxPESCALE2_Write
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIVR_Write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_SIG2SEL_Set
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_SIG1SEL_Set
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_GRP2SEL_Set
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_GRP1SEL_Set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_OVIE_Setable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_CMPIE_Setable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_CAPIE_Setable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_PWM_Setable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_MOD_Set
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_EXFLT_Setable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_EDGESEL_Set
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CASEN_Setable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPONCE_Setable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPMOD_Set
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPEDGE_Set
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPCLR_Setable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCMP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ET12_32bit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxConfig
</UL>

<P><STRONG><a name="[1f3]"></a>FLASH_FLSRDCON_WAIT_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSRDCON_WAIT_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[17d]"></a>GL_DrawLine</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, gui_drawline.o(i.GL_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GL_DrawLine &rArr; GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
</UL>

<P><STRONG><a name="[17f]"></a>GL_DrawLine1Ex</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, gui_drawline.o(i.GL_DrawLine1Ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SwapInt
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetLineColor
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[17e]"></a>GL_DrawLineEx</STRONG> (Thumb, 296 bytes, Stack size 80 bytes, gui_drawline.o(i.GL_DrawLineEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>

<P><STRONG><a name="[180]"></a>GL_DrawPoint</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gui_drawpoint.o(i.GL_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawLineEnd
</UL>

<P><STRONG><a name="[18a]"></a>GL_FillCircle</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, guicirc.o(i.GL_FillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>

<P><STRONG><a name="[188]"></a>GL_FillPolygon</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, gui_fillpolygon.o(i.GL_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GL_FillPolygon &rArr; _Flush &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPrevPointDiffy
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CheckYInterSect
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[159]"></a>GPIO_ALL_Deinit</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, fm33g0xx_gpio.o(i.GPIO_ALL_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_ALL_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Deinit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
</UL>

<P><STRONG><a name="[1d9]"></a>GPIO_ANASEL_PC12ANS_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ANASEL_PC12ANS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
</UL>

<P><STRONG><a name="[1da]"></a>GPIO_ANASEL_PC13ANS_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ANASEL_PC13ANS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
</UL>

<P><STRONG><a name="[1db]"></a>GPIO_ANASEL_PC15ANS_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ANASEL_PC15ANS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
</UL>

<P><STRONG><a name="[192]"></a>GPIO_Deinit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
</UL>

<P><STRONG><a name="[fb]"></a>GPIO_EXTI_EXTIxIF_ChkEx_Ucos</STRONG> (Thumb, 426 bytes, Stack size 20 bytes, system.o(i.GPIO_EXTI_EXTIxIF_ChkEx_Ucos))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EXTI_EXTIxIF_ChkEx_Ucos
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GPIO_Judge
</UL>

<P><STRONG><a name="[197]"></a>GPIO_EXTI_EXTIxIF_ClrEx</STRONG> (Thumb, 244 bytes, Stack size 12 bytes, fm33g0xx_gpio.o(i.GPIO_EXTI_EXTIxIF_ClrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTI_EXTIxIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[194]"></a>GPIO_EXTI_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fm33g0xx_gpio.o(i.GPIO_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_EXTI_Init &rArr; GPIO_EXTI_Select_Edge
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Select_Pin
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Select_Edge
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_EXTIxIF_ClrEx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
</UL>

<P><STRONG><a name="[195]"></a>GPIO_EXTI_Select_Edge</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, fm33g0xx_gpio.o(i.GPIO_EXTI_Select_Edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_EXTI_Select_Edge
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[196]"></a>GPIO_EXTI_Select_Pin</STRONG> (Thumb, 494 bytes, Stack size 20 bytes, fm33g0xx_gpio.o(i.GPIO_EXTI_Select_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_EXTI_Select_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
</UL>

<P><STRONG><a name="[15b]"></a>GPIO_Get_InitPara</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, fm33g0xx_gpio.o(i.GPIO_Get_InitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>

<P><STRONG><a name="[38]"></a>GPIO_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, interrupt_api.o(i.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GPIO_IRQHandler &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, fm33g0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
</UL>

<P><STRONG><a name="[fc]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GPIO_Judge
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_sda_in
</UL>

<P><STRONG><a name="[2a0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_sda_out
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_scl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260iotRst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[15c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_sda_out
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_scl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260iotRst
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[313]"></a>GPIO_ToggleBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Lptim
</UL>

<P><STRONG><a name="[193]"></a>GPIOx_Deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIOx_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
</UL>

<P><STRONG><a name="[66]"></a>GUIMONO_DispChar</STRONG> (Thumb, 392 bytes, Stack size 80 bytes, guicharm.o(i.GUIMONO_DispChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = GUIMONO_DispChar &rArr; LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitMap1BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f4x6.o(.constdata)
<LI> fd24x32.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>GUIMONO_GetCharDistX</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, guicharm.o(i.GUIMONO_GetCharDistX))
<BR>[Address Reference Count : 2]<UL><LI> f4x6.o(.constdata)
<LI> fd24x32.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>GUIMONO_GetFontInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, guicharm.o(i.GUIMONO_GetFontInfo))
<BR>[Address Reference Count : 2]<UL><LI> f4x6.o(.constdata)
<LI> fd24x32.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>GUIMONO_IsInFont</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, guicharm.o(i.GUIMONO_IsInFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GUIMONO_IsInFont
</UL>
<BR>[Address Reference Count : 2]<UL><LI> f4x6.o(.constdata)
<LI> fd24x32.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>GUITASK_CopyContext</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, guitask.o(i.GUITASK_CopyContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUITASK_CopyContext
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[19d]"></a>GUITASK_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guitask.o(i.GUITASK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GUITASK_Init &rArr; GUI_X_InitOS &rArr; OSSemCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[19f]"></a>GUI_AddDecMin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_adddecmin.o(i.GUI_AddDecMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUI_AddDecMin &rArr; GUI_AddDecShift &rArr; _Check_NegLong
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
</UL>

<P><STRONG><a name="[1a1]"></a>GUI_AddDecShift</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gui_adddecshift.o(i.GUI_AddDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI_AddDecShift &rArr; _Check_NegLong
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Check_NegLong
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[1ae]"></a>GUI_AddSign</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gui_adddecshift.o(i.GUI_AddSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_AddSign
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
</UL>

<P><STRONG><a name="[1a3]"></a>GUI_Clear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, guicore.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = GUI_Clear &rArr; GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_IO
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[1a5]"></a>GUI_ClearRect</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, guicore.o(i.GUI_ClearRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_ClearRect &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[1a8]"></a>GUI_DispDec</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, guival.o(i.GUI_DispDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GUI_DispDec &rArr; GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[1aa]"></a>GUI_DispDecAt</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, guival.o(i.GUI_DispDecAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = GUI_DispDecAt &rArr; GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[1a9]"></a>GUI_DispDecShift</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, guival.o(i.GUI_DispDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_DispDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[1ad]"></a>GUI_DispDecSpace</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, guival.o(i.GUI_DispDecSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_DispDecSpace &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1af]"></a>GUI_DispFloat</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guivalf.o(i.GUI_DispFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Long2Len
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1b3]"></a>GUI_DispSDecShift</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, guival.o(i.GUI_DispSDecShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddSign
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[1ac]"></a>GUI_DispString</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, gui_dispstring.o(i.GUI_DispString))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__NumChars2NumBytes
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
</UL>

<P><STRONG><a name="[1ab]"></a>GUI_DispStringAt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_dispstringat.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GUI_DispStringAt &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1ba]"></a>GUI_DrawLine</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_drawline.o(i.GUI_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = GUI_DrawLine &rArr; GL_DrawLine &rArr; GL_DrawLineEx &rArr; GL_DrawLine1Ex &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1bb]"></a>GUI_FillPolygon</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gui_fillpolygon.o(i.GUI_FillPolygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUI_FillPolygon &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1bc]"></a>GUI_GetCharDistX</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, guichar.o(i.GUI_GetCharDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
</UL>

<P><STRONG><a name="[1b4]"></a>GUI_GetFontDistY</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, guichar.o(i.GUI_GetFontDistY))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GUI_GetFontDistY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1b5]"></a>GUI_GetYAdjust</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, guichar.o(i.GUI_GetYAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GUI_GetYAdjust &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1a4]"></a>GUI_GotoXY</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gui_goto.o(i.GUI_GotoXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_GotoXY &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoY
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GotoX
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[1bf]"></a>GUI_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, guicore.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = GUI_Init &rArr; GUI_X_Init &rArr; LCD_12864_Init &rArr; Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_CopyContext
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[1c3]"></a>GUI_InvertRect</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, gui_invertrect.o(i.GUI_InvertRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI_InvertRect &rArr; GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1c2]"></a>GUI_LCD_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lcd.o(i.GUI_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = GUI_LCD_Init &rArr; LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_On
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1a6]"></a>GUI_Lock</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, guitask.o(i.GUI_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[1a0]"></a>GUI_Long2Len</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gui_adddecshift.o(i.GUI_Long2Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GUI_Long2Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecMin
</UL>

<P><STRONG><a name="[2c2]"></a>GUI_RectsIntersect</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gui_rectsintersect.o(i.GUI_RectsIntersect))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[1c4]"></a>GUI_SetDrawMode</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gui_setdrawmode.o(i.GUI_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_SetDrawMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
</UL>

<P><STRONG><a name="[1cc]"></a>GUI_SetFont</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_setfont.o(i.GUI_SetFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_SetFont &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[1cd]"></a>GUI_SetPenSize</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gui_pen.o(i.GUI_SetPenSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_SetPenSize &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1ce]"></a>GUI_SetTextMode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gui_settextmode.o(i.GUI_SetTextMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GUI_SetTextMode &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1d5]"></a>GUI_UC__GetCharCodeInc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_uc.o(i.GUI_UC__GetCharCodeInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineNumChars
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__GetLineDistX
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
</UL>

<P><STRONG><a name="[1b9]"></a>GUI_UC__NumChars2NumBytes</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, gui_uc.o(i.GUI_UC__NumChars2NumBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_UC__NumChars2NumBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1a7]"></a>GUI_Unlock</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, guitask.o(i.GUI_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = GUI_Unlock &rArr; GUI_X_Unlock &rArr; OSSemPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetYAdjust
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetFontDistY
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[1ca]"></a>GUI_X_GetTaskId</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_x_ucosiii.o(i.GUI_X_GetTaskId))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetTaskNo
</UL>

<P><STRONG><a name="[1c0]"></a>GUI_X_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gui_x_ucosiii.o(i.GUI_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GUI_X_Init &rArr; LCD_12864_Init &rArr; Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_12864_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[19e]"></a>GUI_X_InitOS</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gui_x_ucosiii.o(i.GUI_X_InitOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GUI_X_InitOS &rArr; OSSemCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUITASK_Init
</UL>

<P><STRONG><a name="[1c9]"></a>GUI_X_Lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gui_x_ucosiii.o(i.GUI_X_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1cf]"></a>GUI_X_Unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gui_x_ucosiii.o(i.GUI_X_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = GUI_X_Unlock &rArr; OSSemPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Unlock
</UL>

<P><STRONG><a name="[1b8]"></a>GUI__DispLine</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, guicharline.o(i.GUI__DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI__DispLine &rArr; _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispLine
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1b7]"></a>GUI__GetLineDistX</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, guicharline.o(i.GUI__GetLineDistX))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GetCharDistX
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1b6]"></a>GUI__GetLineNumChars</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, guicharline.o(i.GUI__GetLineNumChars))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI__GetLineNumChars &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
</UL>

<P><STRONG><a name="[1d6]"></a>GUI_cos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gui_drawline.o(i.GUI_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUI_cos &rArr; GUI_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[1d7]"></a>GUI_sin</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gui_drawline.o(i.GUI_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GUI_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[117]"></a>GY_IsLegal</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, rtc_api.o(i.GY_IsLegal))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GY_IsLegal &rArr; Check_date &rArr; isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_date
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
</UL>

<P><STRONG><a name="[ff]"></a>GY_RTC_Get</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, rtc_api.o(i.GY_RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GY_RTC_Get &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetTime
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
</UL>

<P><STRONG><a name="[f1]"></a>G_ADC_IO_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, adc_api.o(i.G_ADC_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = G_ADC_IO_Init &rArr; AnalogIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ANASEL_PC15ANS_Set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ANASEL_PC13ANS_Set
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ANASEL_PC12ANS_Set
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalogIO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
</UL>

<P><STRONG><a name="[f2]"></a>G_ADC_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, adc_api.o(i.G_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = G_ADC_Init &rArr; NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLKCON2_ADCCKSEL_Set
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCTRIM_Write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_IE_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADCCON_ADC_EN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
</UL>

<P><STRONG><a name="[f3]"></a>G_CloseeADIO</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, adc_api.o(i.G_CloseeADIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = G_CloseeADIO &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ADC
</UL>

<P><STRONG><a name="[109]"></a>G_I2C_Receive_Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iic_api.o(i.G_I2C_Receive_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = G_I2C_Receive_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Clr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Chk
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_RCEN_Setable
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CBUF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Read_Com
</UL>

<P><STRONG><a name="[10b]"></a>G_I2C_Send_Bit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, iic_api.o(i.G_I2C_Send_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = G_I2C_Send_Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CSTA_RW_Chk
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Clr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Chk
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_SEN_Setable
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_RSEN_Setable
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_PEN_Setable
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_I2CEN_Setable
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_ACKEN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Write_Com
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Read_Com
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Wait_for_end
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
</UL>

<P><STRONG><a name="[10d]"></a>G_I2C_Send_Byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, iic_api.o(i.G_I2C_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = G_I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CSTA_ACKSTA_Chk
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Clr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CIR_I2CIF_Chk
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CBUF_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Write_Com
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Wait_for_end
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
</UL>

<P><STRONG><a name="[108]"></a>G_Sendaddr</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, iic_api.o(i.G_Sendaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = G_Sendaddr &rArr; G_I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2C
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_I2CCTRL_RCEN_Setable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Write_Com
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Read_Com
</UL>

<P><STRONG><a name="[10e]"></a>G_Wait_for_end</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, iic_api.o(i.G_Wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = G_Wait_for_end &rArr; G_I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Write_Com
</UL>

<P><STRONG><a name="[12d]"></a>GetComMessage</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_api.o(i.GetComMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetComMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DelComMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>

<P><STRONG><a name="[1ea]"></a>HEXtoBCD</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, convert.o(i.HEXtoBCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HEXtoBCD &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ucosinit.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f7]"></a>HexToAscll</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, convert.o(i.HexToAscll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToAscll
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>

<P><STRONG><a name="[103]"></a>I2C_BaudREG_Calc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fm33g0xx_i2c.o(i.I2C_BaudREG_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_BaudREG_Calc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
</UL>

<P><STRONG><a name="[104]"></a>I2C_I2CBRG_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CBRG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
</UL>

<P><STRONG><a name="[1df]"></a>I2C_I2CBUF_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CBUF_Read))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Receive_Byte
</UL>

<P><STRONG><a name="[1e7]"></a>I2C_I2CBUF_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CBUF_Write))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
</UL>

<P><STRONG><a name="[1e5]"></a>I2C_I2CCTRL_ACKEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_ACKEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[1e1]"></a>I2C_I2CCTRL_I2CEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_I2CEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[1e4]"></a>I2C_I2CCTRL_PEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_PEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[1dd]"></a>I2C_I2CCTRL_RCEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_RCEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Receive_Byte
</UL>

<P><STRONG><a name="[1e3]"></a>I2C_I2CCTRL_RSEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_RSEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[1e2]"></a>I2C_I2CCTRL_SEN_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CCTRL_SEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[106]"></a>I2C_I2CERR_ERRIE_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CERR_ERRIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
</UL>

<P><STRONG><a name="[105]"></a>I2C_I2CIR_I2CIE_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CIR_I2CIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
</UL>

<P><STRONG><a name="[1de]"></a>I2C_I2CIR_I2CIF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CIR_I2CIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Receive_Byte
</UL>

<P><STRONG><a name="[1e0]"></a>I2C_I2CIR_I2CIF_Clr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CIR_I2CIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Receive_Byte
</UL>

<P><STRONG><a name="[10a]"></a>I2C_I2CSTA_ACKDT_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CSTA_ACKDT_Set))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Read_Com
</UL>

<P><STRONG><a name="[1e8]"></a>I2C_I2CSTA_ACKSTA_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CSTA_ACKSTA_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Byte
</UL>

<P><STRONG><a name="[1e6]"></a>I2C_I2CSTA_RW_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_i2c.o(i.I2C_I2CSTA_RW_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_I2C_Send_Bit
</UL>

<P><STRONG><a name="[1e9]"></a>I2C_ResetI2C</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fm33g0xx_i2c.o(i.I2C_ResetI2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_ResetI2C
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_Sendaddr
</UL>

<P><STRONG><a name="[1eb]"></a>IPReduceZero</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, convert.o(i.IPReduceZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IPReduceZero &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_start
</UL>

<P><STRONG><a name="[146]"></a>IWDT_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[1ed]"></a>IWDT_IWDTCFG_IWDTOVP_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTOVP_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[1ee]"></a>IWDT_IWDTCFG_IWDTSLP4096S_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTSLP4096S_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[1ec]"></a>IWDT_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system.o(i.IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IWDT_Init &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTSLP4096S_Setable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTOVP_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[127]"></a>InitComMessage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart_api.o(i.InitComMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymallocpro
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
</UL>

<P><STRONG><a name="[1f5]"></a>Init_RCC_PERIPH_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.Init_RCC_PERIPH_clk))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[1ef]"></a>Init_SysClk</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, system.o(i.Init_SysClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[1f2]"></a>Init_SysClk_Gen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system.o(i.Init_SysClk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_SysClk_Gen &rArr; Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Setable
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MPRIL_MPRIL_Set
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSRDCON_WAIT_Set
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_PDRCON_PDREN_Setable
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_BORCON_OFF_BOR_Setable
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCC_PERIPH_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1fa]"></a>Init_SysTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.Init_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Init_SysTick &rArr; uCosTimer &rArr; ET12_32bit &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCosTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1fc]"></a>Init_System</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Init_System &rArr; Init_SysTick &rArr; uCosTimer &rArr; ET12_32bit &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ADJUST_Write
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>

<P><STRONG><a name="[1ff]"></a>InputtIO</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system.o(i.InputtIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InputtIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_sda_set
</UL>

<P><STRONG><a name="[1d0]"></a>LCD_12864_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, 12864.o(i.LCD_12864_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LCD_12864_Init &rArr; Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Init
</UL>

<P><STRONG><a name="[201]"></a>LCD_Color2Index</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LCD_Color2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Color2Index
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>

<P><STRONG><a name="[203]"></a>LCD_Color2Index_1</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lcdp1.o(i.LCD_Color2Index_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Color2Index
</UL>

<P><STRONG><a name="[19a]"></a>LCD_DrawBitmap</STRONG> (Thumb, 558 bytes, Stack size 88 bytes, lcd.o(i.LCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LCD_DrawBitmap &rArr; LCD_L0_DrawBitmap &rArr; _DrawBitMap1BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
</UL>

<P><STRONG><a name="[186]"></a>LCD_DrawHLine</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Flush
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawHLine
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillCircle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[185]"></a>LCD_DrawPixel</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lcd.o(i.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_DrawPixel &rArr; LCD_L0_XorPixel &rArr; _XorPixel &rArr; _SetPixelPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[183]"></a>LCD_DrawVLine</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd_drawvline.o(i.LCD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_DrawVLine &rArr; LCD_L0_DrawVLine &rArr; _XorPixel &rArr; _SetPixelPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[19b]"></a>LCD_FillRect</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lcd.o(i.LCD_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_FillRect &rArr; LCD_L0_FillRect &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[20a]"></a>LCD_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd.o(i.LCD_Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Index2Color &rArr; LCD_L0_Index2Color
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Index2Color
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[212]"></a>LCD_Index2Color_1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcdp1.o(i.LCD_Index2Color_1))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Index2Color
</UL>

<P><STRONG><a name="[1c7]"></a>LCD_InitLUT</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcdcolor.o(i.LCD_InitLUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_InitLUT &rArr; LCD_Index2Color &rArr; LCD_L0_Index2Color
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetLUTEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[202]"></a>LCD_L0_Color2Index</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcd_l0_generic.o(i.LCD_L0_Color2Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_L0_Color2Index &rArr; LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index_1
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
</UL>

<P><STRONG><a name="[204]"></a>LCD_L0_DrawBitmap</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, lcdmem.o(i.LCD_L0_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = LCD_L0_DrawBitmap &rArr; _DrawBitMap1BPP
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitMap1BPP
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine8BPP
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine4BPP
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBitmap
</UL>

<P><STRONG><a name="[205]"></a>LCD_L0_DrawHLine</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, lcdmem.o(i.LCD_L0_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_L0_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_FillRect
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>

<P><STRONG><a name="[208]"></a>LCD_L0_DrawVLine</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcdmem.o(i.LCD_L0_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_L0_DrawVLine &rArr; _XorPixel &rArr; _SetPixelPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawVLine
</UL>

<P><STRONG><a name="[209]"></a>LCD_L0_FillRect</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, lcdmem.o(i.LCD_L0_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_L0_FillRect &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillRect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[219]"></a>LCD_L0_GetRect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_l0_generic.o(i.LCD_L0_GetRect))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetClipRectMax
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[20b]"></a>LCD_L0_Index2Color</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lcd_l0_generic.o(i.LCD_L0_Index2Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_L0_Index2Color
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color_1
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Index2Color
</UL>

<P><STRONG><a name="[1c6]"></a>LCD_L0_Init</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, lcdmem.o(i.LCD_L0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_L0_Init &rArr; LCD_L0_SetOrg
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_SetOrg
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_ReInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_On
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[213]"></a>LCD_L0_Off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcdmem.o(i.LCD_L0_Off))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
</UL>

<P><STRONG><a name="[1c8]"></a>LCD_L0_On</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcdmem.o(i.LCD_L0_On))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[214]"></a>LCD_L0_ReInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lcdmem.o(i.LCD_L0_ReInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
</UL>

<P><STRONG><a name="[20c]"></a>LCD_L0_SetLUTEntry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcdmem.o(i.LCD_L0_SetLUTEntry))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitLUT
</UL>

<P><STRONG><a name="[215]"></a>LCD_L0_SetOrg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lcdmem.o(i.LCD_L0_SetOrg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_L0_SetOrg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_Init
</UL>

<P><STRONG><a name="[207]"></a>LCD_L0_SetPixelIndex</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcdmem.o(i.LCD_L0_SetPixelIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_L0_SetPixelIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>

<P><STRONG><a name="[206]"></a>LCD_L0_XorPixel</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lcdmem.o(i.LCD_L0_XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_L0_XorPixel &rArr; _XorPixel &rArr; _SetPixelPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>

<P><STRONG><a name="[216]"></a>LCD_SetBkColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(i.LCD_SetBkColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetBkColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[217]"></a>LCD_SetBkColorIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetBkColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetBkColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
</UL>

<P><STRONG><a name="[1c5]"></a>LCD_SetClipRectMax</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetClipRectMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetClipRectMax
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[21a]"></a>LCD_SetColor</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd.o(i.LCD_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_SetColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color2Index
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_InitContext
</UL>

<P><STRONG><a name="[21b]"></a>LCD_SetColorIndex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetColorIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetColorIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetColorIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
</UL>

<P><STRONG><a name="[199]"></a>LCD_SetDrawMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetDrawMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetDrawMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetDrawMode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_ClearRect
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMONO_DispChar
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_LCD_Init
</UL>

<P><STRONG><a name="[21c]"></a>MyTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, ucosinit.o(i.MyTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymallocpro
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yasuotest
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_NBTaskCreate
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_LEDCreate
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Start
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskCreate
</UL>

<P><STRONG><a name="[21e]"></a>MyTaskDel</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ucosinit.o(i.MyTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MyTaskDel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[220]"></a>NBTxDeal</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, event.o(i.NBTxDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NBTxDeal &rArr; iotTxData
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotTxData
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ToCheckSum
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotTxDeal
</UL>

<P><STRONG><a name="[f8]"></a>NVIC_SET</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, system.o(i.NVIC_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
</UL>

<P><STRONG><a name="[22e]"></a>OSCfg_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cfg_app.o(i.OSCfg_Init))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[256]"></a>OSIdleTaskHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSIdleTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSIdleTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTask
</UL>

<P><STRONG><a name="[224]"></a>OSInit</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHook
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgPoolInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dbg_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCfg_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Start
</UL>

<P><STRONG><a name="[225]"></a>OSInitHook</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[d4]"></a>OSIntEnter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[d8]"></a>OSIntExit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSIntExit &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[231]"></a>OSSched</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, os_core.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[144]"></a>OSSchedLock</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedLock &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>

<P><STRONG><a name="[148]"></a>OSSchedUnlock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>

<P><STRONG><a name="[1d1]"></a>OSSemCreate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemCreate &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SemDbgListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_InitOS
</UL>

<P><STRONG><a name="[1d2]"></a>OSSemPend</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Lock
</UL>

<P><STRONG><a name="[1d3]"></a>OSSemPost</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_Unlock
</UL>

<P><STRONG><a name="[237]"></a>OSStart</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSStart &rArr; OSStartHighRdy &rArr; OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioGetHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Start
</UL>

<P><STRONG><a name="[238]"></a>OSStatReset</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, os_stat.o(i.OSStatReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatReset &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_StatReset
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[23a]"></a>OSStatTaskCPUUsageInit</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, os_stat.o(i.OSStatTaskCPUUsageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSStatTaskCPUUsageInit &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[262]"></a>OSStatTaskHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSStatTaskHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSStatTaskHook
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[21d]"></a>OSTaskCreate</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListAdd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTaskInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_IdleTaskInit
</UL>

<P><STRONG><a name="[23f]"></a>OSTaskCreateHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[21f]"></a>OSTaskDel</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, os_task.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQFreeAll
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskDbgListRemove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[24a]"></a>OSTaskDelHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[24c]"></a>OSTaskQPend</STRONG> (Thumb, 522 bytes, Stack size 48 bytes, os_task.o(i.OSTaskQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSTaskQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskUart3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskUart2
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskIO
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[198]"></a>OSTaskQPost</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, os_task.o(i.OSTaskQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3TimCallBack
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TimCallBack
</UL>

<P><STRONG><a name="[264]"></a>OSTaskReturnHook</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[24f]"></a>OSTaskStkChk</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[23d]"></a>OSTaskStkInit</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[8b]"></a>OSTaskSwHook</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTaskSwHook &rArr; CPU_IntDisMeasMaxCurReset &rArr; CPU_IntDisMeasMaxCurGet
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>

<P><STRONG><a name="[23b]"></a>OSTimeDly</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StatTask
</UL>

<P><STRONG><a name="[251]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
</UL>

<P><STRONG><a name="[252]"></a>OSTimeTick</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_time.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[253]"></a>OSTimeTickHook</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[19]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_cpu_c.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_cpu_c.o(i.OS_CPU_SysTickInit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[22d]"></a>OS_Dbg_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, os_dbg.o(i.OS_Dbg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_Dbg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[41]"></a>OS_IdleTask</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_core.o(i.OS_IdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_IdleTask &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIdleTaskHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_IdleTaskInit)
</UL>
<P><STRONG><a name="[22a]"></a>OS_IdleTaskInit</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, os_core.o(i.OS_IdleTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OS_IdleTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[228]"></a>OS_MsgPoolInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, os_msg.o(i.OS_MsgPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MsgPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[249]"></a>OS_MsgQFreeAll</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_msg.o(i.OS_MsgQFreeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MsgQFreeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[24d]"></a>OS_MsgQGet</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, os_msg.o(i.OS_MsgQGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_MsgQGet
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
</UL>

<P><STRONG><a name="[23e]"></a>OS_MsgQInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os_msg.o(i.OS_MsgQInit))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskInitTCB
</UL>

<P><STRONG><a name="[24e]"></a>OS_MsgQPut</STRONG> (Thumb, 158 bytes, Stack size 36 bytes, os_msg.o(i.OS_MsgQPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OS_MsgQPut
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
</UL>

<P><STRONG><a name="[258]"></a>OS_MutexGrpAdd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpAdd))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[248]"></a>OS_MutexGrpPostAll</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, os_mutex.o(i.OS_MutexGrpPostAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpRemove
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[246]"></a>OS_MutexGrpPrioFindHighest</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, os_mutex.o(i.OS_MutexGrpPrioFindHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_MutexGrpPrioFindHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[257]"></a>OS_MutexGrpRemove</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_mutex.o(i.OS_MutexGrpRemove))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[235]"></a>OS_Pend</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, os_core.o(i.OS_Pend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[25b]"></a>OS_PendDbgNameAdd</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[25d]"></a>OS_PendDbgNameRemove</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_core.o(i.OS_PendDbgNameRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[25c]"></a>OS_PendListChangePrio</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_core.o(i.OS_PendListChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_PendListChangePrio &rArr; OS_PendListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[233]"></a>OS_PendListInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_core.o(i.OS_PendListInit))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[25a]"></a>OS_PendListInsertPrio</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListInsertPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListInsertPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[245]"></a>OS_PendListRemove</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, os_core.o(i.OS_PendListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_PendListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[236]"></a>OS_Post</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_core.o(i.OS_Post))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListRemove
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendDbgNameRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPostAll
</UL>

<P><STRONG><a name="[22f]"></a>OS_PrioGetHighest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, os_prio.o(i.OS_PrioGetHighest))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_CntLeadZeros
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[226]"></a>OS_PrioInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInit))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[240]"></a>OS_PrioInsert</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioInsert))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[260]"></a>OS_PrioRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_prio.o(i.OS_PrioRemove))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>

<P><STRONG><a name="[227]"></a>OS_RdyListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_RdyListInit))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[25e]"></a>OS_RdyListInsert</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[25f]"></a>OS_RdyListInsertHead</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertHead
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[241]"></a>OS_RdyListInsertTail</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OS_RdyListInsertTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_RdyListInsertTail
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[261]"></a>OS_RdyListMoveHeadToTail</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_core.o(i.OS_RdyListMoveHeadToTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedRoundRobin
</UL>

<P><STRONG><a name="[243]"></a>OS_RdyListRemove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_core.o(i.OS_RdyListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[254]"></a>OS_SchedRoundRobin</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, os_core.o(i.OS_SchedRoundRobin))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = OS_SchedRoundRobin &rArr; OS_RdyListMoveHeadToTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListMoveHeadToTail
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[234]"></a>OS_SemDbgListAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, os_sem.o(i.OS_SemDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[42]"></a>OS_StatTask</STRONG> (Thumb, 816 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_StatTask &rArr; OSTimeDly &rArr; OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskHook
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatReset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_stat.o(i.OS_StatTaskInit)
</UL>
<P><STRONG><a name="[22c]"></a>OS_StatTaskInit</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, os_stat.o(i.OS_StatTaskInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = OS_StatTaskInit &rArr; OSTaskCreate &rArr; OSSched &rArr; OS_PrioGetHighest &rArr; CPU_CntLeadZeros
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[259]"></a>OS_TaskBlock</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_core.o(i.OS_TaskBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Pend
</UL>

<P><STRONG><a name="[247]"></a>OS_TaskChangePrio</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, os_task.o(i.OS_TaskChangePrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OS_TaskChangePrio &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PrioInsert
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListRemove
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertTail
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsertHead
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListChangePrio
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>

<P><STRONG><a name="[242]"></a>OS_TaskDbgListAdd</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskDbgListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[24b]"></a>OS_TaskDbgListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskDbgListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_TaskDbgListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[229]"></a>OS_TaskInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskInit))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[23c]"></a>OS_TaskInitTCB</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, os_task.o(i.OS_TaskInitTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_TaskInitTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsgQInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[40]"></a>OS_TaskReturn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_task.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_MutexGrpPostAll &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[22b]"></a>OS_TickInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_tick.o(i.OS_TickInit))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[263]"></a>OS_TickListInsert</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, os_tick.o(i.OS_TickListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OS_TickListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskBlock
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsertDly
</UL>

<P><STRONG><a name="[250]"></a>OS_TickListInsertDly</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, os_tick.o(i.OS_TickListInsertDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OS_TickListInsertDly &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListInsert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[244]"></a>OS_TickListRemove</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, os_tick.o(i.OS_TickListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_TickListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
</UL>

<P><STRONG><a name="[255]"></a>OS_TickUpdate</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_tick.o(i.OS_TickUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_TickUpdate &rArr; OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickListUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[15d]"></a>OutputIO</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, system.o(i.OutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP_INIT
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iic_op_sda_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_12864_Init
</UL>

<P><STRONG><a name="[2f6]"></a>PortReduceZero_New</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, convert.o(i.PortReduceZero_New))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PortReduceZero_New
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_start
</UL>

<P><STRONG><a name="[266]"></a>PressureAndTempTest</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, event.o(i.PressureAndTempTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = PressureAndTempTest &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Write_Com
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Read_Com
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemporPre
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
</UL>

<P><STRONG><a name="[12e]"></a>QueueIsEmpty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_api.o(i.QueueIsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>

<P><STRONG><a name="[132]"></a>QueueIsFull</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart_api.o(i.QueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRecDat
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
</UL>

<P><STRONG><a name="[139]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Get
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Get
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Getable
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Get
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLOSEL_Get
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLINSEL_Get
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Getable
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLDB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[1fd]"></a>RCC_Init_RCHF_Trim</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_Init_RCHF_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Init_RCHF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFTRIM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[1f6]"></a>RCC_MPRIL_MPRIL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_MPRIL_MPRIL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[1dc]"></a>RCC_PERCLKCON2_ADCCKSEL_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PERCLKCON2_ADCCKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
</UL>

<P><STRONG><a name="[f7]"></a>RCC_PERCLK_SetableEx</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, fm33g0xx_rcc.o(i.RCC_PERCLK_SetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ET12_32bit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxConfig
</UL>

<P><STRONG><a name="[26c]"></a>RCC_PLLCON_PLLDB_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLDB_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[26a]"></a>RCC_PLLCON_PLLEN_Getable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1f4]"></a>RCC_PLLCON_PLLEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[26b]"></a>RCC_PLLCON_PLLINSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLINSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[26d]"></a>RCC_PLLCON_PLLOSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLOSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[269]"></a>RCC_RCHFCON_FSEL_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_FSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[272]"></a>RCC_RCHFCON_FSEL_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_FSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[268]"></a>RCC_RCHFCON_RCHFEN_Getable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[273]"></a>RCC_RCHFCON_RCHFEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[292]"></a>RCC_RCHFTRIM_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFTRIM_Read))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[271]"></a>RCC_RCHFTRIM_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFTRIM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
</UL>

<P><STRONG><a name="[1f0]"></a>RCC_RCHF_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_RCHF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_RCHF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Setable
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[26f]"></a>RCC_SYSCLKSEL_AHBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[275]"></a>RCC_SYSCLKSEL_AHBPRES_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[270]"></a>RCC_SYSCLKSEL_APBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[276]"></a>RCC_SYSCLKSEL_APBPRES_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[277]"></a>RCC_SYSCLKSEL_EXTICKSEL_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_EXTICKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[279]"></a>RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[278]"></a>RCC_SYSCLKSEL_SLP_ENEXTI_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SLP_ENEXTI_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[26e]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[274]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[1f1]"></a>RCC_SysClk_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_SysClk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Set
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SLP_ENEXTI_Setable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_EXTICKSEL_Set
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Set
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[1fe]"></a>RTC_ADJUST_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_ADJUST_Write))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
</UL>

<P><STRONG><a name="[28d]"></a>RTC_ADSIGN_ADSIGN_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_ADSIGN_ADSIGN_Set))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
</UL>

<P><STRONG><a name="[280]"></a>RTC_BCDDATE_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDDATE_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[287]"></a>RTC_BCDDATE_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDDATE_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[27f]"></a>RTC_BCDHOUR_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDHOUR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[286]"></a>RTC_BCDHOUR_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDHOUR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[27e]"></a>RTC_BCDMIN_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDMIN_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[285]"></a>RTC_BCDMIN_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDMIN_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[281]"></a>RTC_BCDMONTH_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDMONTH_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[288]"></a>RTC_BCDMONTH_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDMONTH_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[27d]"></a>RTC_BCDSEC_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDSEC_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[284]"></a>RTC_BCDSEC_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDSEC_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[283]"></a>RTC_BCDWEEK_Read</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDWEEK_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[28a]"></a>RTC_BCDWEEK_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDWEEK_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[282]"></a>RTC_BCDYEAR_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDYEAR_Read))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_GetEx
</UL>

<P><STRONG><a name="[289]"></a>RTC_BCDYEAR_Write</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_BCDYEAR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeDate_SetEx
</UL>

<P><STRONG><a name="[28b]"></a>RTC_CALSTEP_Get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_CALSTEP_Get))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
</UL>

<P><STRONG><a name="[110]"></a>RTC_FSEL_FSEL_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_FSEL_FSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[1c]"></a>RTC_IRQHandler</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, interrupt_api.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = RTC_IRQHandler &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCIF_ClrEx
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCIF_ChkEx
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RTCIE_GetableEx
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>RTC_Init_Exp</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, api_exp.o(i.RTC_Init_Exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTC_Init_Exp &rArr; API_RTC_Init &rArr; API_SetTIME &rArr; GY_IsLegal &rArr; Check_date &rArr; isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>

<P><STRONG><a name="[112]"></a>RTC_PR1SEN_PR1SEN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_PR1SEN_PR1SEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[27b]"></a>RTC_RTCIE_GetableEx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_RTCIE_GetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>RTC_RTCIE_SetableEx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_RTCIE_SetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[27a]"></a>RTC_RTCIF_ChkEx</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_RTCIF_ChkEx))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>RTC_RTCIF_ClrEx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_RTCIF_ClrEx))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>RTC_RTCWE_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_RTCWE_Write))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
</UL>

<P><STRONG><a name="[113]"></a>RTC_STAMPEN_STAMP0EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_STAMPEN_STAMP0EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[114]"></a>RTC_STAMPEN_STAMP1EN_Setable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_STAMPEN_STAMP1EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[1d8]"></a>RTC_TimeDate_GetEx</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fm33g0xx_rtc.o(i.RTC_TimeDate_GetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_TimeDate_GetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDYEAR_Read
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDWEEK_Read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDSEC_Read
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMONTH_Read
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMIN_Read
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDHOUR_Read
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDDATE_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GY_RTC_Get
</UL>

<P><STRONG><a name="[121]"></a>RTC_TimeDate_SetEx</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, fm33g0xx_rtc.o(i.RTC_TimeDate_SetEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_TimeDate_SetEx
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDYEAR_Write
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDWEEK_Write
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDSEC_Write
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMONTH_Write
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDMIN_Write
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDHOUR_Write
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BCDDATE_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
</UL>

<P><STRONG><a name="[111]"></a>RTC_Trim_Proc</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fm33g0xx_rtc.o(i.RTC_Trim_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_Trim_Proc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ADJUST_Write
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CALSTEP_Get
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ADSIGN_ADSIGN_Set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_RTC_Init
</UL>

<P><STRONG><a name="[28e]"></a>RchfAdjust</STRONG> (Thumb, 574 bytes, Stack size 80 bytes, system.o(i.RchfAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RchfAdjust &rArr; ETIMxConfig &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFTRIM_Write
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFTRIM_Read
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxPESCALE1_Write
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_FDETIF_FDETO_Chk
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_FDETIF_FDETIF_Clr
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_FDETIF_FDETIF_Chk
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxCapture
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
</UL>

<P><STRONG><a name="[11b]"></a>RcvByte</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, iic_api.o(i.RcvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RcvByte &rArr; Ack_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack_I2c
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Read_Com
</UL>

<P><STRONG><a name="[294]"></a>Refresh</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcdmem.o(i.Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Refresh &rArr; lcd_show &rArr; Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>

<P><STRONG><a name="[1f9]"></a>SCU_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system.o(i.SCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_WWDT_STOP_Setable
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_IWDT_STOP_Setable
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET4_STOP_Setable
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET3_STOP_Setable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET2_STOP_Setable
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET1_STOP_Setable
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT2_STOP_Setable
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT1_STOP_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[29d]"></a>SCU_MCUDBGCR_DBG_BT1_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[29c]"></a>SCU_MCUDBGCR_DBG_BT2_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[29b]"></a>SCU_MCUDBGCR_DBG_ET1_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[29a]"></a>SCU_MCUDBGCR_DBG_ET2_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[299]"></a>SCU_MCUDBGCR_DBG_ET3_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET3_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[298]"></a>SCU_MCUDBGCR_DBG_ET4_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET4_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[297]"></a>SCU_MCUDBGCR_DBG_IWDT_STOP_Setable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_IWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[296]"></a>SCU_MCUDBGCR_DBG_WWDT_STOP_Setable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_WWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[11a]"></a>SIMLT_I2C_OP</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, iic_api.o(i.SIMLT_I2C_OP))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SIMLT_I2C_OP &rArr; SendByte &rArr; TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_I2c
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Write_Com
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Read_Com
</UL>

<P><STRONG><a name="[29f]"></a>SIMLT_I2C_OP_INIT</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iic_api.o(i.SIMLT_I2C_OP_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SIMLT_I2C_OP_INIT &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[11f]"></a>SIMLT_Wait_for_end</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, iic_api.o(i.SIMLT_Wait_for_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SIMLT_Wait_for_end &rArr; SendByte &rArr; TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2c
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_I2c
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Write_Com
</UL>

<P><STRONG><a name="[200]"></a>Send</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, 12864.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_12864_Init
</UL>

<P><STRONG><a name="[11e]"></a>SendByte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, iic_api.o(i.SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendByte &rArr; TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestAck
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Write_Com
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_Wait_for_end
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP
</UL>

<P><STRONG><a name="[129]"></a>SendComMessage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_api.o(i.SendComMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendComMessage &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRecDat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
</UL>

<P><STRONG><a name="[29e]"></a>Start_I2c</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iic_api.o(i.Start_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Start_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_Wait_for_end
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP
</UL>

<P><STRONG><a name="[11c]"></a>Stop_I2c</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iic_api.o(i.Stop_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Write_Com
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SIMLT_I2C_Read_Com
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestAck
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_Wait_for_end
</UL>

<P><STRONG><a name="[2a2]"></a>Sysinit_Exp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, api_exp.o(i.Sysinit_Exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Sysinit_Exp &rArr; Uart_Init_Macro &rArr; API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SaveAdr_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_Macro
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init_Exp
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_fm33g0xx_app.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(.text)
</UL>
<P><STRONG><a name="[2a6]"></a>Temp_Exp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_exp.o(i.Temp_Exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Temp_Exp &rArr; API_Temperature &rArr; ANAC_ADC_TemperatureCalc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1s
</UL>

<P><STRONG><a name="[2a1]"></a>TestAck</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, iic_api.o(i.TestAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestAck &rArr; Stop_I2c &rArr; TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2c
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>

<P><STRONG><a name="[2a7]"></a>TheIPFormatIsCorrect</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, convert.o(i.TheIPFormatIsCorrect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TheIPFormatIsCorrect &rArr; is_ipv4_addr &rArr; mystrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_start
</UL>

<P><STRONG><a name="[2aa]"></a>TicksDelay</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, system.o(i.TicksDelay))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayUs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
</UL>

<P><STRONG><a name="[fd]"></a>TicksDelayMs</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, system.o(i.TicksDelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GPIO_Judge
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260iotRst
</UL>

<P><STRONG><a name="[141]"></a>TicksDelayUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.TicksDelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TicksDelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestAck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_I2c
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_I2c
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvByte
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ack_I2c
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_12864_Init
</UL>

<P><STRONG><a name="[221]"></a>ToCheckSum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, event.o(i.ToCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ToCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
</UL>

<P><STRONG><a name="[25]"></a>UART2_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, interrupt_api.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART2_IRQHandler &rArr; API_TimSet &rArr; API_Etim_Init &rArr; NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxInterupt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXREG_Read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ChkEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_TimSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART3_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, interrupt_api.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = UART3_IRQHandler &rArr; API_TimSet &rArr; API_Etim_Init &rArr; NVIC_SET &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxInterupt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXREG_Read
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ChkEx
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_TimSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2af]"></a>UART_BaudREGCalc</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, fm33g0xx_uart.o(i.UART_BaudREGCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_BaudREGCalc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[2b1]"></a>UART_IRCON_TH_Set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_IRCON_TH_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[2b0]"></a>UART_IRCON_TZBRG_Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_IRCON_TZBRG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[13e]"></a>UART_IRModulation_Init</STRONG> (Thumb, 274 bytes, Stack size 80 bytes, fm33g0xx_uart.o(i.UART_IRModulation_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRCON_TZBRG_Set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRCON_TH_Set
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[2b2]"></a>UART_Init</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, fm33g0xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Init &rArr; UART_UARTIE_RxTxIE_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_IREN_Setable
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXIS_Set
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_STOPSEL_Set
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUFSTA_TX_INTSEL_Set
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SPBRG_Write
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_PDSEL_Set
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_ERRIE_Setable
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_TXDFLAG_Setable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RXDFLAG_Setable
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RTX7EN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[13a]"></a>UART_SInit</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, fm33g0xx_uart.o(i.UART_SInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[136]"></a>UART_UARTIE_RxTxIE_GetableEx</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, fm33g0xx_uart.o(i.UART_UARTIE_RxTxIE_GetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_UARTIE_RxTxIE_GetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uart_Send
</UL>

<P><STRONG><a name="[13d]"></a>UART_UARTIE_RxTxIE_SetableEx</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, fm33g0xx_uart.o(i.UART_UARTIE_RxTxIE_SetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_UARTIE_RxTxIE_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2ab]"></a>UART_UARTIF_RxTxIF_ChkEx</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, fm33g0xx_uart.o(i.UART_UARTIF_RxTxIF_ChkEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_UARTIF_RxTxIF_ChkEx
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>UART_UARTIF_RxTxIF_ClrEx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_UARTIF_RxTxIF_ClrEx))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_End
</UL>

<P><STRONG><a name="[2b5]"></a>UARTx_RTXCON_RTX7EN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_RTX7EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2ba]"></a>UARTx_RTXCON_RXDFLAG_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_RXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2bb]"></a>UARTx_RTXCON_TXDFLAG_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_TXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2ac]"></a>UARTx_RXREG_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXREG_Read))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>UARTx_RXSTA_ERRIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_ERRIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b4]"></a>UARTx_RXSTA_PDSEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_PDSEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_RXSTA_PDSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[13b]"></a>UARTx_RXSTA_RXEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_RXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b3]"></a>UARTx_SPBRG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_SPBRG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[137]"></a>UARTx_TXBUFSTA_TXFF_Chk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXBUFSTA_TXFF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uart_Send
</UL>

<P><STRONG><a name="[2b9]"></a>UARTx_TXBUFSTA_TX_INTSEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_uart.o(i.UARTx_TXBUFSTA_TX_INTSEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_TXBUFSTA_TX_INTSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[12b]"></a>UARTx_TXREG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXREG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uart_Send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Start
</UL>

<P><STRONG><a name="[13f]"></a>UARTx_TXSTA_IREN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_IREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b6]"></a>UARTx_TXSTA_STOPSEL_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_STOPSEL_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_TXSTA_STOPSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[13c]"></a>UARTx_TXSTA_TXEN_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_TXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2b8]"></a>UARTx_TXSTA_TXIS_Set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_TXIS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTx_TXSTA_TXIS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[2bc]"></a>Uart2TimCallBack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uarttimeout.o(i.Uart2TimCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Uart2TimCallBack &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTimeOut
</UL>

<P><STRONG><a name="[2bd]"></a>Uart3TimCallBack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uarttimeout.o(i.Uart3TimCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Uart3TimCallBack &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTimeOut
</UL>

<P><STRONG><a name="[2ad]"></a>UartRxInterupt</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, uart_api.o(i.UartRxInterupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UartRxInterupt &rArr; __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>UartTimeOut</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uarttimeout.o(i.UartTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = UartTimeOut &rArr; Uart3TimCallBack &rArr; OSTaskQPost &rArr; OS_Post &rArr; OS_RdyListInsert &rArr; OS_RdyListInsertTail
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3TimCallBack
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2TimCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM3_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>UartTxInterupt</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, uart_api.o(i.UartTxInterupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartTxInterupt &rArr; __DelComMessage &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DelComMessage
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsEmpty
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComMessage
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_End
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[2a4]"></a>Uart_Init_Macro</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, api_exp.o(i.Uart_Init_Macro))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Uart_Init_Macro &rArr; API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>

<P><STRONG><a name="[2a3]"></a>User_IO_Init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, main.o(i.User_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = User_IO_Init &rArr; GPIO_EXTI_Init &rArr; GPIO_EXTI_Select_Edge
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI_Init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>

<P><STRONG><a name="[c7]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[df]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_api.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_Channel_SetEx
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_CloseeADIO
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;G_ADC_IO_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPost
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Post
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
</UL>

<P><STRONG><a name="[bb]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[12f]"></a>__DelComMessage</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_api.o(i.__DelComMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __DelComMessage &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>

<P><STRONG><a name="[2c5]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2c6]"></a>__lzo_init_v2</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, minilzo.o(i.__lzo_init_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __lzo_init_v2 &rArr; _lzo_config_check &rArr; lzo_memops_get_ne32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
</UL>

<P><STRONG><a name="[2c8]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2c9]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2ca]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2cb]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2cd]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[13]"></a>__myfree</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.__myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myrealloc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DelComMessage
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTxInterupt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxInterupt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[128]"></a>__mymalloc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.__mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRecDat
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxInterupt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_It_Send
</UL>

<P><STRONG><a name="[12]"></a>__mymallocpro</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.__mymallocpro))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>__myrealloc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, malloc.o(i.__myrealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __myrealloc &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Send
</UL>

<P><STRONG><a name="[9a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2c7]"></a>_lzo_config_check</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, minilzo.o(i._lzo_config_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lzo_config_check &rArr; lzo_memops_get_ne32
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2p
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_ne32
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_ne16
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_le32
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lzo_init_v2
</UL>

<P><STRONG><a name="[89]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, myprintf.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2d9]"></a>bc260getcmd</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, iot_bc260.o(i.bc260getcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bc260getcmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
</UL>

<P><STRONG><a name="[2de]"></a>cJSON_Delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cjson.o(i.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[2e7]"></a>cJSON_GetErrorPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(i.cJSON_GetErrorPtr))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
</UL>

<P><STRONG><a name="[2df]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(i.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_GetObjectItem &rArr; cJSON_strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
</UL>

<P><STRONG><a name="[2e2]"></a>cJSON_Parse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(i.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
</UL>

<P><STRONG><a name="[2e3]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, cjson.o(i.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[2e6]"></a>cJSON_to_cmddata</STRONG> (Thumb, 716 bytes, Stack size 32 bytes, main.o(i.cJSON_to_cmddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = cJSON_to_cmddata &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetErrorPtr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Uart3
</UL>

<P><STRONG><a name="[2f0]"></a>camper</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, convert.o(i.camper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = camper
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
</UL>

<P><STRONG><a name="[2e9]"></a>compute_m</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, event.o(i.compute_m))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = compute_m &rArr; __aeabi_cfrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
</UL>

<P><STRONG><a name="[2c1]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, myprintf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>getTemporPre</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, event.o(i.getTemporPre))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getTemporPre &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
</UL>

<P><STRONG><a name="[2f1]"></a>getiot</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iotnew_api.o(i.getiot))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxDeal
</UL>

<P><STRONG><a name="[46]"></a>iic_op_scl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iic_api.o(i.iic_op_scl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_op_scl
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_api.o(i.SIMLT_I2C_OP_INIT)
</UL>
<P><STRONG><a name="[45]"></a>iic_op_sda_in</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iic_api.o(i.iic_op_sda_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_op_sda_in
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_api.o(i.SIMLT_I2C_OP_INIT)
</UL>
<P><STRONG><a name="[44]"></a>iic_op_sda_out</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iic_api.o(i.iic_op_sda_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iic_op_sda_out
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_api.o(i.SIMLT_I2C_OP_INIT)
</UL>
<P><STRONG><a name="[43]"></a>iic_op_sda_set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iic_api.o(i.iic_op_sda_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iic_op_sda_set &rArr; InputtIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputtIO
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iic_api.o(i.SIMLT_I2C_OP_INIT)
</UL>
<P><STRONG><a name="[5d]"></a>iotEnd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, iotnew_api.o(i.iotEnd))
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[2dd]"></a>iotRead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iotnew_api.o(i.iotRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = iotRead &rArr; iotRxDeal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxdeal
</UL>

<P><STRONG><a name="[2ed]"></a>iotRecDat</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iotnew_api.o(i.iotRecDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iotRecDat &rArr; __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendComMessage
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsFull
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Uart2
</UL>

<P><STRONG><a name="[2da]"></a>iotRst</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iotnew_api.o(i.iotRst))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260iotRst
</UL>

<P><STRONG><a name="[2ee]"></a>iotRxData</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, iotnew_api.o(i.iotRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = iotRxData &rArr; strnstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnstr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camper
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrlen
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxDeal
</UL>

<P><STRONG><a name="[2ec]"></a>iotRxDeal</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, iotnew_api.o(i.iotRxDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = iotRxDeal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getiot
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRead
</UL>

<P><STRONG><a name="[5c]"></a>iotSend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iotnew_api.o(i.iotSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = iotSend &rArr; iotTxDeal &rArr; NBTxDeal &rArr; iotTxData
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotTxDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[30e]"></a>iotTim</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, iotnew_api.o(i.iotTim))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1s
</UL>

<P><STRONG><a name="[222]"></a>iotTxData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, iotnew_api.o(i.iotTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iotTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
</UL>

<P><STRONG><a name="[2f2]"></a>iotTxDeal</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iotnew_api.o(i.iotTxDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iotTxDeal &rArr; NBTxDeal &rArr; iotTxData
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBTxDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotSend
</UL>

<P><STRONG><a name="[2f3]"></a>iot_init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, iotnew_api.o(i.iot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = iot_init &rArr; match_cmd &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DelComMessage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitComMessage
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260getcmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_start
</UL>

<P><STRONG><a name="[2f5]"></a>iot_start</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, iotnew_api.o(i.iot_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = iot_start &rArr; iot_init &rArr; match_cmd &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TheIPFormatIsCorrect
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortReduceZero_New
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPReduceZero
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskNB
</UL>

<P><STRONG><a name="[2d7]"></a>iotprintf</STRONG> (Thumb, 476 bytes, Stack size 72 bytes, iotnew_api.o(i.iotprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrlen
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FooSend
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260udpsend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260rxanaly
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260onetsend
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260coapsend
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260SendUdpTcpIpPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260SendCoapIPort
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260OneNetojb2Rec
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260OneNetojb1Rec
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260OberveSend
</UL>

<P><STRONG><a name="[157]"></a>isLeap</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtc_api.o(i.isLeap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isLeap &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_date
</UL>

<P><STRONG><a name="[2a8]"></a>is_ipv4_addr</STRONG> (Thumb, 146 bytes, Stack size 28 bytes, convert.o(i.is_ipv4_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_ipv4_addr &rArr; mystrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TheIPFormatIsCorrect
</UL>

<P><STRONG><a name="[295]"></a>lcd_show</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, 12864.o(i.lcd_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lcd_show &rArr; Send &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh
</UL>

<P><STRONG><a name="[2f8]"></a>lzo1x_1_compress</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, minilzo.o(i.lzo1x_1_compress))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lzo1x_1_compress &rArr; lzo1x_1_compress_core &rArr; lzo_memops_get_le32
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memset
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_1_compress_core
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
</UL>

<P><STRONG><a name="[31c]"></a>lzo1x_decompress_safe</STRONG> (Thumb, 754 bytes, Stack size 40 bytes, minilzo.o(i.lzo1x_decompress_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lzo1x_decompress_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
</UL>

<P><STRONG><a name="[2f9]"></a>lzo_memset</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, minilzo.o(i.lzo_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lzo_memset &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_1_compress
</UL>

<P><STRONG><a name="[31a]"></a>lzo_version_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, minilzo.o(i.lzo_version_date))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
</UL>

<P><STRONG><a name="[31b]"></a>lzo_version_string</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, minilzo.o(i.lzo_version_string))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Taskyasuo
</UL>

<P><STRONG><a name="[84]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; Sysinit_Exp &rArr; Uart_Init_Macro &rArr; API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2ce]"></a>mem_free</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, malloc.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
</UL>

<P><STRONG><a name="[10]"></a>mem_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, malloc.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysinit_Exp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[2cf]"></a>mem_malloc</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, malloc.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myrealloc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymallocpro
</UL>

<P><STRONG><a name="[11]"></a>mem_perused</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, malloc.o(i.mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_perused
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[2d0]"></a>mymemcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.mymemcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mymemcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myrealloc
</UL>

<P><STRONG><a name="[2fc]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[2a9]"></a>mystrlen</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, convert.o(i.mystrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mystrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ipv4_addr
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TheIPFormatIsCorrect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>

<P><STRONG><a name="[2ff]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[306]"></a>showgui</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, event.o(i.showgui))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = showgui &rArr; GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_perused
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Refresh
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetPenSize
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_InvertRect
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_FillPolygon
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecSpace
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[307]"></a>showpretable</STRONG> (Thumb, 836 bytes, Stack size 64 bytes, event.o(i.showpretable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = showpretable &rArr; GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_m
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[309]"></a>showtemptable</STRONG> (Thumb, 708 bytes, Stack size 64 bytes, event.o(i.showtemptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = showtemptable &rArr; GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawLine
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_m
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PressureAndTempTest
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskLED
</UL>

<P><STRONG><a name="[305]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2ef]"></a>strnstr</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, convert.o(i.strnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strnstr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRxData
</UL>

<P><STRONG><a name="[317]"></a>uCOS_APP_1d</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.uCOS_APP_1d))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[316]"></a>uCOS_APP_1h</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.uCOS_APP_1h))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[30c]"></a>uCOS_APP_1m</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, main.o(i.uCOS_APP_1m))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = uCOS_APP_1m &rArr; RchfAdjust &rArr; ETIMxConfig &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[30d]"></a>uCOS_APP_1s</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.uCOS_APP_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uCOS_APP_1s &rArr; Temp_Exp &rArr; API_Temperature &rArr; ANAC_ADC_TemperatureCalc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Exp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GetTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Exp
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotTim
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[30f]"></a>uCOS_APP_IO</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.uCOS_APP_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uCOS_APP_IO &rArr; yasuotest &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_GPIO_Judge
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yasuotest
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_NBTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskIO
</UL>

<P><STRONG><a name="[312]"></a>uCOS_APP_Lptim</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.uCOS_APP_Lptim))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uCOS_APP_Lptim
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskClock
</UL>

<P><STRONG><a name="[55]"></a>uCOS_APP_Uart2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(i.uCOS_APP_Uart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uCOS_APP_Uart2 &rArr; iotRecDat &rArr; __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRecDat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskUart2)
</UL>
<P><STRONG><a name="[56]"></a>uCOS_APP_Uart3</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.uCOS_APP_Uart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = uCOS_APP_Uart3 &rArr; cJSON_to_cmddata &rArr; cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_to_cmddata
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_NBTaskCreate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskUart3)
</UL>
<P><STRONG><a name="[314]"></a>uCOS_LEDCreate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, event.o(i.uCOS_LEDCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uCOS_LEDCreate &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
</UL>

<P><STRONG><a name="[145]"></a>uCOS_LowPower</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.uCOS_LowPower))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>

<P><STRONG><a name="[310]"></a>uCOS_NBTaskCreate</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, event.o(i.uCOS_NBTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uCOS_NBTaskCreate &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Uart3
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_IO
</UL>

<P><STRONG><a name="[2fb]"></a>uCOS_Start</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = uCOS_Start &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[315]"></a>uCOS_SystemInit</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, main.o(i.uCOS_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = uCOS_SystemInit &rArr; uCOS_LEDCreate &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIMLT_I2C_OP_INIT
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Write_Com
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Read_Com
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_I2C_Init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_LEDCreate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[4e]"></a>uCOS_TaskNB</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, event.o(i.uCOS_TaskNB))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskNB &rArr; iot_start &rArr; iot_init &rArr; match_cmd &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_start
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event.o(i.uCOS_NBTaskCreate)
</UL>
<P><STRONG><a name="[57]"></a>uCOS_Taskyasuo</STRONG> (Thumb, 514 bytes, Stack size 56 bytes, event.o(i.uCOS_Taskyasuo))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = uCOS_Taskyasuo &rArr; MyTaskDel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_version_string
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_version_date
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_decompress_safe
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_1_compress
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lzo_init_v2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event.o(i.yasuotest)
</UL>
<P><STRONG><a name="[1fb]"></a>uCosTimer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.uCosTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uCosTimer &rArr; ET12_32bit &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ET12_32bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
</UL>

<P><STRONG><a name="[311]"></a>yasuotest</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, event.o(i.yasuotest))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = yasuotest &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_IO
</UL>

<P><STRONG><a name="[3d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[31d]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Temperature
</UL>

<P><STRONG><a name="[31e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_m
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
</UL>

<P><STRONG><a name="[320]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[2c0]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DispFloatFix
</UL>

<P><STRONG><a name="[369]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[1b1]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_m
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Trim_Proc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[321]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[308]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
</UL>

<P><STRONG><a name="[322]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_ADC_TemperatureCalc
</UL>

<P><STRONG><a name="[324]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[70]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d]"></a>uCOS_TaskLED</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, event.o(i.uCOS_TaskLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskLED &rArr; showtemptable &rArr; GUI_DispFloat &rArr; _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetFont
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispString
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecAt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDec
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showtemptable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showpretable
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showgui
</UL>
<BR>[Address Reference Count : 1]<UL><LI> event.o(i.uCOS_LEDCreate)
</UL>
<P><STRONG><a name="[2be]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_IO_Init
</UL>

<P><STRONG><a name="[5f]"></a>bc260OberveSend</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iot_bc260.o(i.bc260OberveSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = bc260OberveSend &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>bc260OneNetojb1Rec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iot_bc260.o(i.bc260OneNetojb1Rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = bc260OneNetojb1Rec &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>bc260OneNetojb2Rec</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iot_bc260.o(i.bc260OneNetojb2Rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = bc260OneNetojb2Rec &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>bc260SendCoapIPort</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, iot_bc260.o(i.bc260SendCoapIPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = bc260SendCoapIPort &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>bc260SendUdpTcpIpPort</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iot_bc260.o(i.bc260SendUdpTcpIpPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = bc260SendUdpTcpIpPort &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>bc260coapsend</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, iot_bc260.o(i.bc260coapsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = bc260coapsend &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[4c]"></a>bc260faildo</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, iot_bc260.o(i.bc260faildo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bc260faildo &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[59]"></a>bc260iotRst</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iot_bc260.o(i.bc260iotRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bc260iotRst &rArr; TicksDelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TicksDelayMs
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>bc260onetsend</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, iot_bc260.o(i.bc260onetsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = bc260onetsend &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[4b]"></a>bc260rxanaly</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, iot_bc260.o(i.bc260rxanaly))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = bc260rxanaly &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsciiToHex
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[5a]"></a>bc260rxdeal</STRONG> (Thumb, 2044 bytes, Stack size 56 bytes, iot_bc260.o(i.bc260rxdeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = bc260rxdeal &rArr; iotRead &rArr; iotRxDeal &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToHex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharToBety
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotRead
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_date
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetTIME
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>bc260tcpsend</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iot_bc260.o(i.bc260tcpsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = bc260tcpsend &rArr; bc260udpsend &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260udpsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[4a]"></a>bc260udpsend</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, iot_bc260.o(i.bc260udpsend))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = bc260udpsend &rArr; iotprintf &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bc260tcpsend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iot_bc260.o(i.bc260getcmd)
</UL>
<P><STRONG><a name="[17c]"></a>FooSend</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iotnew_api.o(i.FooSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_SEND
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;match_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iotprintf
</UL>

<P><STRONG><a name="[2f4]"></a>match_cmd</STRONG> (Thumb, 648 bytes, Stack size 64 bytes, iotnew_api.o(i.match_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = match_cmd &rArr; FooSend &rArr; API_UART_SEND &rArr; API_Uart_Send &rArr; API_UART_It_Send &rArr; InitComMessage &rArr; __mymallocpro &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QueueIsEmpty
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComMessage
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_SEND
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FooSend
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_init
</UL>

<P><STRONG><a name="[163]"></a>ETIMxCapture</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, system.o(i.ETIMxCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETIMxCapture
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIVR_Read
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIF_CAPIF_Clr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIF_CAPIF_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[167]"></a>ETIMxConfig</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, system.o(i.ETIMxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ETIMxConfig &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RchfAdjust
</UL>

<P><STRONG><a name="[15f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ET12_32bit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMxConfig
</UL>

<P><STRONG><a name="[223]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
</UL>

<P><STRONG><a name="[319]"></a>uCOS_EventCreate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ucosinit.o(i.uCOS_EventCreate))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[51]"></a>uCOS_TaskClock</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_TaskClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskClock &rArr; uCOS_APP_1m &rArr; RchfAdjust &rArr; ETIMxConfig &rArr; ETIMx_Init &rArr; ETIMx_ETxINSEL_SIG2SEL_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_Lptim
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1s
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1m
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1h
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_1d
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskCreate)
</UL>
<P><STRONG><a name="[318]"></a>uCOS_TaskCreate</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ucosinit.o(i.uCOS_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskCreate &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskStart
</UL>

<P><STRONG><a name="[52]"></a>uCOS_TaskIO</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_TaskIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskIO &rArr; uCOS_APP_IO &rArr; yasuotest &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_APP_IO
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskCreate)
</UL>
<P><STRONG><a name="[50]"></a>uCOS_TaskStart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskStart &rArr; uCOS_SystemInit &rArr; uCOS_LEDCreate &rArr; MyTaskCreate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_SystemInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTaskDel
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatTaskCPUUsageInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurReset
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_TaskCreate
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uCOS_EventCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_Start)
</UL>
<P><STRONG><a name="[53]"></a>uCOS_TaskUart2</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_TaskUart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskUart2 &rArr; OSTaskQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskCreate)
</UL>
<P><STRONG><a name="[54]"></a>uCOS_TaskUart3</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ucosinit.o(i.uCOS_TaskUart3))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = uCOS_TaskUart3 &rArr; OSTaskQPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQPend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_UART_Rx_Queue_Get_Do
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucosinit.o(i.uCOS_TaskCreate)
</UL>
<P><STRONG><a name="[14d]"></a>CPU_IntDisMeasInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cpu_core.o(i.CPU_IntDisMeasInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CPU_IntDisMeasInit &rArr; CPU_IntDisMeasStop
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Save
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_SR_Restore
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStop
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasStart
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[14f]"></a>CPU_IntDisMeasMaxCalc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cpu_core.o(i.CPU_IntDisMeasMaxCalc))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxGet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_IntDisMeasMaxCurGet
</UL>

<P><STRONG><a name="[14c]"></a>CPU_TS_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cpu_core.o(i.CPU_TS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CPU_TS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_Init
</UL>

<P><STRONG><a name="[265]"></a>OS_TickListUpdate</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, os_tick.o(i.OS_TickListUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OS_TickListUpdate &rArr; OS_TaskChangePrio &rArr; OS_RdyListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_TS_TmrRd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_RdyListInsert
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_PendListRemove
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskChangePrio
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MutexGrpPrioFindHighest
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TickUpdate
</UL>

<P><STRONG><a name="[2e1]"></a>cJSON_New_Item</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(i.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cJSON_New_Item
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[2e0]"></a>cJSON_strcasecmp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cjson.o(i.cJSON_strcasecmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[2fd]"></a>parse_array</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, cjson.o(i.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[303]"></a>parse_hex4</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, cjson.o(i.parse_hex4))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[2fe]"></a>parse_number</STRONG> (Thumb, 384 bytes, Stack size 80 bytes, cjson.o(i.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[301]"></a>parse_object</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, cjson.o(i.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[302]"></a>parse_string</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, cjson.o(i.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_string
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[2e5]"></a>parse_value</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, cjson.o(i.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = parse_value &rArr; parse_number &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[2e4]"></a>skip</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cjson.o(i.skip))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[2fa]"></a>lzo1x_1_compress_core</STRONG> (Thumb, 642 bytes, Stack size 64 bytes, minilzo.o(i.lzo1x_1_compress_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lzo1x_1_compress_core &rArr; lzo_memops_get_le32
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_1_compress
</UL>

<P><STRONG><a name="[2d4]"></a>lzo_memops_get_le16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_le16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[2d6]"></a>lzo_memops_get_le32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_le32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_1_compress_core
</UL>

<P><STRONG><a name="[2d3]"></a>lzo_memops_get_ne16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_ne16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_ne16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[2d5]"></a>lzo_memops_get_ne32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_ne32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_ne32
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[2d2]"></a>u2p</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, minilzo.o(i.u2p))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[20e]"></a>_DrawBitLine2BPP</STRONG> (Thumb, 692 bytes, Stack size 40 bytes, lcdmem.o(i._DrawBitLine2BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine2BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[20f]"></a>_DrawBitLine4BPP</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, lcdmem.o(i._DrawBitLine4BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _DrawBitLine4BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[210]"></a>_DrawBitLine8BPP</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lcdmem.o(i._DrawBitLine8BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DrawBitLine8BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[20d]"></a>_DrawBitMap1BPP</STRONG> (Thumb, 520 bytes, Stack size 76 bytes, lcdmem.o(i._DrawBitMap1BPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _DrawBitMap1BPP
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawBitmap
</UL>

<P><STRONG><a name="[2c3]"></a>_GetPixel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcdmem.o(i._GetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>

<P><STRONG><a name="[2c4]"></a>_SetPixelPhys</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lcdmem.o(i._SetPixelPhys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetPixelPhys
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_XorPixel
</UL>

<P><STRONG><a name="[211]"></a>_XorPixel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lcdmem.o(i._XorPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _XorPixel &rArr; _SetPixelPhys
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetPixelPhys
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_XorPixel
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_DrawVLine
</UL>

<P><STRONG><a name="[1a2]"></a>_Check_NegLong</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gui_adddecshift.o(i._Check_NegLong))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Check_NegLong
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_AddDecShift
</UL>

<P><STRONG><a name="[181]"></a>Abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gui_drawline.o(i.Abs))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[187]"></a>_CalcOrto</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, gui_drawline.o(i._CalcOrto))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _CalcOrto &rArr; _atan2 &rArr; _atan0_45
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_sin
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_cos
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[189]"></a>_DrawLineEnd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_drawline.o(i._DrawLineEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _DrawLineEnd &rArr; GL_DrawPoint &rArr; GL_FillCircle &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLineEx
</UL>

<P><STRONG><a name="[184]"></a>_SetLineColor</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gui_drawline.o(i._SetLineColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _SetLineColor &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[182]"></a>_SwapInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gui_drawline.o(i._SwapInt))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_DrawLine1Ex
</UL>

<P><STRONG><a name="[2d1]"></a>_atan0_45</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gui_drawline.o(i._atan0_45))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _atan0_45
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan2
</UL>

<P><STRONG><a name="[2bf]"></a>_atan2</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, gui_drawline.o(i._atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _atan2 &rArr; _atan0_45
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atan0_45
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CalcOrto
</UL>

<P><STRONG><a name="[190]"></a>_Add</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gui_fillpolygon.o(i._Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _Add
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AddPoint
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[18e]"></a>_AddPoint</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gui_fillpolygon.o(i._AddPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _AddPoint &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Add
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[18f]"></a>_CheckYInterSect</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, gui_fillpolygon.o(i._CheckYInterSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _CheckYInterSect &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[18c]"></a>_DrawHLine</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gui_fillpolygon.o(i._DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _DrawHLine &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[191]"></a>_Flush</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, gui_fillpolygon.o(i._Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _Flush &rArr; LCD_DrawHLine &rArr; LCD_L0_DrawHLine
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[18d]"></a>_GetPrevPointDiffy</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, gui_fillpolygon.o(i._GetPrevPointDiffy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetPrevPointDiffy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[18b]"></a>_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_fillpolygon.o(i._Init))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GL_FillPolygon
</UL>

<P><STRONG><a name="[1bd]"></a>_GotoX</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(i._GotoX))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[1be]"></a>_GotoY</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gui_goto.o(i._GotoY))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_GotoXY
</UL>

<P><STRONG><a name="[64]"></a>_CalcSizeOfChar</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._CalcSizeOfChar))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>_Encode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._Encode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>_GetCharCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharCode))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>_GetCharSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gui_uc_encodenone.o(i._GetCharSize))
<BR>[Address Reference Count : 1]<UL><LI> gui_uc_encodenone.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>_DispLine</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, guicharline.o(i._DispLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _DispLine &rArr; GUI_UC__GetCharCodeInc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_UC__GetCharCodeInc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_RectsIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI__DispLine
</UL>

<P><STRONG><a name="[1c1]"></a>_InitContext</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, guicore.o(i._InitContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _InitContext &rArr; LCD_SetColor &rArr; LCD_Color2Index &rArr; LCD_L0_Color2Index &rArr; LCD_Color2Index_1 &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColor
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColor
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_L0_GetRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[1cb]"></a>_GetTaskNo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, guitask.o(i._GetTaskNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetTaskNo
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_X_GetTaskId
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Lock
</UL>

<P><STRONG><a name="[1b2]"></a>_DispFloatFix</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, guivalf.o(i._DispFloatFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _DispFloatFix &rArr; GUI_DispSDecShift &rArr; GUI_DispString &rArr; GUI__GetLineDistX &rArr; GUI_GetCharDistX &rArr; GUI_Lock &rArr; GUI_X_Lock &rArr; OSSemPend &rArr; OS_Pend &rArr; OS_TaskBlock &rArr; OS_TickListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispSDecShift
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispDecShift
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispFloat
</UL>

<P><STRONG><a name="[218]"></a>_GetColorIndex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i._GetColorIndex))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColorIndex
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetBkColorIndex
</UL>

<P><STRONG><a name="[a5]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a4]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[323]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[31f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[b5]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[c9]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[ce]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[be]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[95]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
