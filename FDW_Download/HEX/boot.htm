<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\FDW_Download\HEX\boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\FDW_Download\HEX\boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Mar 29 14:55:10 2021
<BR><P>
<H3>Maximum Stack Usage =        628 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Uart_Proc &rArr; Flsah_Write_String &rArr; FLASH_Prog_ByteString
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[73]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">OS_CPU_PendSVHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">OS_CPU_PendSVHandler</a><BR>
 <LI><a href="#[14]">OS_CPU_SysTickHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">OS_CPU_SysTickHandler</a><BR>
 <LI><a href="#[1a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[28]">AES_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2d]">BTIM1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2e]">BTIM2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2c]">COMP_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2a]">DMA_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2f]">ETIM1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[30]">ETIM2_IRQHandler</a> from interrupt.o(i.ETIM2_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[31]">ETIM3_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[32]">ETIM4_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[19]">FDET_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[33]">GPIO_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1b]">HSPI_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[26]">I2C_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[27]">LCD_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[29]">LPTIM_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[34]">LPUART_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[18]">NVMIF_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[13]">OS_CPU_PendSVHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[14]">OS_CPU_SysTickHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[16]">SVD_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_fm33g0xx_boot.o(i.SystemInit) referenced from startup_fm33g0xx.o(.text)
 <LI><a href="#[24]">U78160_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[25]">U78161_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1e]">UART0_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[1f]">UART1_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[20]">UART2_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[21]">UART3_IRQHandler</a> from interrupt.o(i.UART3_IRQHandler) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[22]">UART4_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[23]">UART5_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[2b]">WKUP_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[15]">WWDT_IRQHandler</a> from startup_fm33g0xx.o(.text) referenced from startup_fm33g0xx.o(RESET)
 <LI><a href="#[3c]">__main</a> from __main.o(!!!main) referenced from startup_fm33g0xx.o(.text)
 <LI><a href="#[37]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[38]">fputc</a> from myprintf.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[39]">lzo_read</a> from bspatch.o(i.lzo_read) referenced from bspatch.o(i.patch)
 <LI><a href="#[3a]">mem_init</a> from malloc.o(i.mem_init) referenced from malloc.o(.data)
 <LI><a href="#[3b]">mem_perused</a> from malloc.o(i.mem_perused) referenced from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[130]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[131]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[54]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[41]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>

<P><STRONG><a name="[42]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[47]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[133]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[134]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[135]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[136]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[137]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[138]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[139]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[140]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[142]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[143]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[144]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[145]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[146]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[147]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[150]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[44]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[48]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Uart_Proc &rArr; Flsah_Write_String &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[75]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[153]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_PendSVHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>BTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ETIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ETIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ETIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>HSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>NVMIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>U78160_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>U78161_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33g0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33g0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[155]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_ldivmod</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
</UL>

<P><STRONG><a name="[156]"></a>_ll_sdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, llsdiv.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minilzo_decompress
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoRead
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[53]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[43]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[127]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoRead
</UL>

<P><STRONG><a name="[157]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[5b]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
</UL>

<P><STRONG><a name="[158]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadOpen
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_perused
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWDog
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[5f]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[62]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[65]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[64]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[15f]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[160]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[161]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[162]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[163]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[6a]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[69]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[164]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>

<P><STRONG><a name="[165]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[168]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[70]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[52]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[57]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[169]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[45]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c6]"></a>ANAC_BORCON_OFF_BOR_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_BORCON_OFF_BOR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[c5]"></a>ANAC_PDRCON_PDREN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_anac.o(i.ANAC_PDRCON_PDREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[76]"></a>API_Erase_Sector</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_flash.o(i.API_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = API_Erase_Sector &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchGotoAPP
</UL>

<P><STRONG><a name="[79]"></a>API_Etim_Init</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, bsp_etim.o(i.API_Etim_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = API_Etim_Init &rArr; ETIMx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Etim2
</UL>

<P><STRONG><a name="[7c]"></a>API_Uartx_Init</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, bsp_uart.o(i.API_Uartx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_IREN_Setable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_Macro
</UL>

<P><STRONG><a name="[7e]"></a>AltFunIO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_core.o(i.AltFunIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AltFunIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[103]"></a>BitChange</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, uart.o(i.BitChange))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[101]"></a>CalCRC16_CCITT</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, uart.o(i.CalCRC16_CCITT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalCRC16_CCITT
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[87]"></a>ClearClosedIF</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, interrupt.o(i.ClearClosedIF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearClosedIF
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXREG_Read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ClrEx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ChkEx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>Close_AllIO_GPIO_80pin</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bsp_core.o(i.Close_AllIO_GPIO_80pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Close_AllIO_GPIO_80pin &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[8e]"></a>CloseeIO</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_core.o(i.CloseeIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
</UL>

<P><STRONG><a name="[92]"></a>DeinitSystem</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bootmain.o(i.DeinitSystem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DeinitSystem &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>ETIM2_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, interrupt.o(i.ETIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ETIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXREG_Write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIF_OVIF_Clr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>ETIMx_ETxCMP_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCMP_Write))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a3]"></a>ETIMx_ETxCR_CAPCLR_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPCLR_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a5]"></a>ETIMx_ETxCR_CAPEDGE_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPEDGE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a2]"></a>ETIMx_ETxCR_CAPMOD_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPMOD_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a4]"></a>ETIMx_ETxCR_CAPONCE_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CAPONCE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9f]"></a>ETIMx_ETxCR_CASEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CASEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[94]"></a>ETIMx_ETxCR_CEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_CEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Etim2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
</UL>

<P><STRONG><a name="[a0]"></a>ETIMx_ETxCR_EDGESEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_EDGESEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9d]"></a>ETIMx_ETxCR_EXFLT_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_EXFLT_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9e]"></a>ETIMx_ETxCR_MOD_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_MOD_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a1]"></a>ETIMx_ETxCR_PWM_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxCR_PWM_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a9]"></a>ETIMx_ETxIE_CAPIE_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_CAPIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a8]"></a>ETIMx_ETxIE_CMPIE_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_CMPIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[aa]"></a>ETIMx_ETxIE_OVIE_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIE_OVIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[95]"></a>ETIMx_ETxIF_OVIF_Clr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIF_OVIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>ETIMx_ETxINSEL_GRP1SEL_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_GRP1SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9a]"></a>ETIMx_ETxINSEL_GRP2SEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_GRP2SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[97]"></a>ETIMx_ETxINSEL_SIG1SEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_SIG1SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[98]"></a>ETIMx_ETxINSEL_SIG2SEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxINSEL_SIG2SEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[a6]"></a>ETIMx_ETxIVR_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxIVR_Write))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9b]"></a>ETIMx_ETxPESCALE1_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxPESCALE1_Write))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[9c]"></a>ETIMx_ETxPESCALE2_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_etim.o(i.ETIMx_ETxPESCALE2_Write))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_Init
</UL>

<P><STRONG><a name="[7b]"></a>ETIMx_Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, fm33g0xx_etim.o(i.ETIMx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETIMx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxPESCALE1_Write
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxPESCALE2_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIVR_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_SIG2SEL_Set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_SIG1SEL_Set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_GRP2SEL_Set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxINSEL_GRP1SEL_Set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_OVIE_Setable
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_CMPIE_Setable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxIE_CAPIE_Setable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_PWM_Setable
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_MOD_Set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_EXFLT_Setable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_EDGESEL_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CASEN_Setable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPONCE_Setable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPMOD_Set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPEDGE_Set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CAPCLR_Setable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCMP_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_EPCON_EREQ_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_EPCON_EREQ_Set))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_EPCON_ERTYPE_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_EPCON_ERTYPE_Set))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[b1]"></a>FLASH_EPCON_PREQ_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_EPCON_PREQ_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashStart
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashAddData
</UL>

<P><STRONG><a name="[78]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fm33g0xx_flash.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_ERTYPE_Set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_EREQ_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_ERDIF_Clr
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_ERDIF_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Erase_Sector
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
</UL>

<P><STRONG><a name="[ae]"></a>FLASH_FLSIF_ERDIF_Chk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSIF_ERDIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[af]"></a>FLASH_FLSIF_ERDIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSIF_ERDIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>

<P><STRONG><a name="[b2]"></a>FLASH_FLSIF_PRDIF_Chk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSIF_PRDIF_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashAddData
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_FLSIF_PRDIF_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSIF_PRDIF_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashAddData
</UL>

<P><STRONG><a name="[ad]"></a>FLASH_FLSKEY_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSKEY_Write))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashEnd
</UL>

<P><STRONG><a name="[c1]"></a>FLASH_FLSRDCON_WAIT_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_flash.o(i.FLASH_FLSRDCON_WAIT_Set))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_Prog_ByteString</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, fm33g0xx_flash.o(i.FLASH_Prog_ByteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_PREQ_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Clr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flsah_Write_String
</UL>

<P><STRONG><a name="[b4]"></a>Flash_Erase_Sector</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_flash.o(i.Flash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Flash_Erase_Sector &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>

<P><STRONG><a name="[b5]"></a>Flsah_Write_String</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, bsp_flash.o(i.Flsah_Write_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flsah_Write_String &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Prog_ByteString
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchGotoAPP
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_ALL_Deinit</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, fm33g0xx_gpio.o(i.GPIO_ALL_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_ALL_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Deinit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_Deinit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_Get_InitPara</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fm33g0xx_gpio.o(i.GPIO_Get_InitPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Get_InitPara
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>

<P><STRONG><a name="[86]"></a>GPIO_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fm33g0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputIO
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AltFunIO
</UL>

<P><STRONG><a name="[90]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>

<P><STRONG><a name="[b7]"></a>GPIOx_Deinit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_gpio.o(i.GPIOx_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ALL_Deinit
</UL>

<P><STRONG><a name="[b9]"></a>IWDT_Clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWDog
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
</UL>

<P><STRONG><a name="[ba]"></a>IWDT_IWDTCFG_IWDTOVP_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTOVP_Set))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[bb]"></a>IWDT_IWDTCFG_IWDTSLP4096S_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_iwdt.o(i.IWDT_IWDTCFG_IWDTSLP4096S_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[b8]"></a>IWDT_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_core.o(i.IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDT_Init &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTSLP4096S_Setable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_IWDTCFG_IWDTOVP_Set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[bc]"></a>Init_Etim2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bootmain.o(i.Init_Etim2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Init_Etim2 &rArr; API_Etim_Init &rArr; ETIMx_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIMx_ETxCR_CEN_Setable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>Init_RCC_PERIPH_clk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_core.o(i.Init_RCC_PERIPH_clk))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[bd]"></a>Init_SysClk</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, bsp_core.o(i.Init_SysClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[c0]"></a>Init_SysClk_Gen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_core.o(i.Init_SysClk_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Init_SysClk_Gen &rArr; Init_SysClk &rArr; RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Setable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MPRIL_MPRIL_Set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSRDCON_WAIT_Set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_PDRCON_PDREN_Setable
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANAC_BORCON_OFF_BOR_Setable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_RCC_PERIPH_clk
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c8]"></a>Init_SysTick</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_core.o(i.Init_SysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_SysTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[ca]"></a>Init_System</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_core.o(i.Init_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_System &rArr; Close_AllIO_GPIO_80pin &rArr; CloseeIO &rArr; OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ADJUST_Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Close_AllIO_GPIO_80pin
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>Judge_RX_Frame</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, uart.o(i.Judge_RX_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Judge_RX_Frame &rArr; Uart_RXErr_Proc &rArr; Uart_RxErr_ClrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RXErr_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>LzoCRC</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, gylzo.o(i.LzoCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LzoCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_SET</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_core.o(i.NVIC_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[91]"></a>OutputIO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bsp_core.o(i.OutputIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OutputIO &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseeIO
</UL>

<P><STRONG><a name="[7f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Get
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Getable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLOSEL_Get
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLINSEL_Get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLEN_Getable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCON_PLLDB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[cb]"></a>RCC_Init_RCHF_Trim</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, fm33g0xx_rcc.o(i.RCC_Init_RCHF_Trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_Init_RCHF_Trim
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFTRIM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c4]"></a>RCC_MPRIL_MPRIL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_MPRIL_MPRIL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[77]"></a>RCC_PERCLK_SetableEx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_PERCLK_SetableEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PERCLK_SetableEx
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Etim_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flsah_Write_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Erase_Sector
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashStart
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashEnd
</UL>

<P><STRONG><a name="[d4]"></a>RCC_PLLCON_PLLDB_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLDB_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[d2]"></a>RCC_PLLCON_PLLEN_Getable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[c2]"></a>RCC_PLLCON_PLLEN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[d3]"></a>RCC_PLLCON_PLLINSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLINSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[d5]"></a>RCC_PLLCON_PLLOSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_PLLCON_PLLOSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[d1]"></a>RCC_RCHFCON_FSEL_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_FSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[da]"></a>RCC_RCHFCON_FSEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_FSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[d0]"></a>RCC_RCHFCON_RCHFEN_Getable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Getable))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[db]"></a>RCC_RCHFCON_RCHFEN_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFCON_RCHFEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHF_Init
</UL>

<P><STRONG><a name="[d9]"></a>RCC_RCHFTRIM_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_RCHFTRIM_Write))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Init_RCHF_Trim
</UL>

<P><STRONG><a name="[be]"></a>RCC_RCHF_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_RCHF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_RCHF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_RCHFEN_Setable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RCHFCON_FSEL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[d7]"></a>RCC_SYSCLKSEL_AHBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[dd]"></a>RCC_SYSCLKSEL_AHBPRES_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_AHBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[d8]"></a>RCC_SYSCLKSEL_APBPRES_Get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[de]"></a>RCC_SYSCLKSEL_APBPRES_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_APBPRES_Set))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[df]"></a>RCC_SYSCLKSEL_EXTICKSEL_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_EXTICKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[e1]"></a>RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[e0]"></a>RCC_SYSCLKSEL_SLP_ENEXTI_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SLP_ENEXTI_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[d6]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[dc]"></a>RCC_SYSCLKSEL_SYSCLKSEL_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_rcc.o(i.RCC_SYSCLKSEL_SYSCLKSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SysClk_Init
</UL>

<P><STRONG><a name="[bf]"></a>RCC_SysClk_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fm33g0xx_rcc.o(i.RCC_SysClk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_SysClk_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_LPM_RCLP_OFF_Setable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SYSCLKSEL_Set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_SLP_ENEXTI_Setable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_EXTICKSEL_Set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_APBPRES_Set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKSEL_AHBPRES_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk
</UL>

<P><STRONG><a name="[cc]"></a>RTC_ADJUST_Write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_rtc.o(i.RTC_ADJUST_Write))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
</UL>

<P><STRONG><a name="[c7]"></a>SCU_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp_core.o(i.SCU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_WWDT_STOP_Setable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_IWDT_STOP_Setable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET4_STOP_Setable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET3_STOP_Setable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET2_STOP_Setable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_ET1_STOP_Setable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT2_STOP_Setable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_MCUDBGCR_DBG_BT1_STOP_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysClk_Gen
</UL>

<P><STRONG><a name="[e9]"></a>SCU_MCUDBGCR_DBG_BT1_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e8]"></a>SCU_MCUDBGCR_DBG_BT2_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_BT2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e7]"></a>SCU_MCUDBGCR_DBG_ET1_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET1_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e6]"></a>SCU_MCUDBGCR_DBG_ET2_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET2_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e5]"></a>SCU_MCUDBGCR_DBG_ET3_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET3_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e4]"></a>SCU_MCUDBGCR_DBG_ET4_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_ET4_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e3]"></a>SCU_MCUDBGCR_DBG_IWDT_STOP_Setable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_IWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[e2]"></a>SCU_MCUDBGCR_DBG_WWDT_STOP_Setable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33g0xx_scu.o(i.SCU_MCUDBGCR_DBG_WWDT_STOP_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_fm33g0xx_boot.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>Tx_Frame</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(i.Tx_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tx_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXREG_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[21]"></a>UART3_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, interrupt.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART3_IRQHandler &rArr; Judge_RX_Frame &rArr; Uart_RXErr_Proc &rArr; Uart_RxErr_ClrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXREG_Read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ClrEx
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIF_RxTxIF_ChkEx
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_GetableEx
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Frame
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RX_Frame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearClosedIF
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33g0xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>UART_BaudREGCalc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fm33g0xx_uart.o(i.UART_BaudREGCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_BaudREGCalc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[f4]"></a>UART_IRCON_TH_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_IRCON_TH_Set))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[f1]"></a>UART_IRCON_TZBRG_Set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_IRCON_TZBRG_Set))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRModulation_Init
</UL>

<P><STRONG><a name="[84]"></a>UART_IRModulation_Init</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, fm33g0xx_uart.o(i.UART_IRModulation_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRCON_TZBRG_Set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRCON_TH_Set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[f5]"></a>UART_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fm33g0xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXEN_Setable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_RXEN_Setable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_UARTIE_RxTxIE_SetableEx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_IREN_Setable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_TXIS_Set
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXSTA_STOPSEL_Set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_TXBUFSTA_TX_INTSEL_Set
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SPBRG_Write
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_PDSEL_Set
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_ERRIE_Setable
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_TXDFLAG_Setable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RXDFLAG_Setable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RTXCON_RTX7EN_Setable
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SInit
</UL>

<P><STRONG><a name="[80]"></a>UART_SInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, fm33g0xx_uart.o(i.UART_SInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_SInit &rArr; UART_BaudREGCalc &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BaudREGCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[88]"></a>UART_UARTIE_RxTxIE_GetableEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_UARTIE_RxTxIE_GetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearClosedIF
</UL>

<P><STRONG><a name="[83]"></a>UART_UARTIE_RxTxIE_SetableEx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_UARTIE_RxTxIE_SetableEx))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM2_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[89]"></a>UART_UARTIF_RxTxIF_ChkEx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_UARTIF_RxTxIF_ChkEx))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearClosedIF
</UL>

<P><STRONG><a name="[8b]"></a>UART_UARTIF_RxTxIF_ClrEx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UART_UARTIF_RxTxIF_ClrEx))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearClosedIF
</UL>

<P><STRONG><a name="[f8]"></a>UARTx_RTXCON_RTX7EN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_RTX7EN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fd]"></a>UARTx_RTXCON_RXDFLAG_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_RXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>UARTx_RTXCON_TXDFLAG_Setable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RTXCON_TXDFLAG_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[8a]"></a>UARTx_RXREG_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXREG_Read))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearClosedIF
</UL>

<P><STRONG><a name="[fa]"></a>UARTx_RXSTA_ERRIE_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_ERRIE_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[107]"></a>UARTx_RXSTA_FERR_Chk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_FERR_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ChkEx
</UL>

<P><STRONG><a name="[10a]"></a>UARTx_RXSTA_FERR_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_FERR_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ClrEx
</UL>

<P><STRONG><a name="[108]"></a>UARTx_RXSTA_OERR_Chk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_OERR_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ChkEx
</UL>

<P><STRONG><a name="[10b]"></a>UARTx_RXSTA_OERR_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_OERR_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ClrEx
</UL>

<P><STRONG><a name="[f7]"></a>UARTx_RXSTA_PDSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_PDSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[106]"></a>UARTx_RXSTA_PERR_Chk</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_PERR_Chk))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ChkEx
</UL>

<P><STRONG><a name="[109]"></a>UARTx_RXSTA_PERR_Clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_PERR_Clr))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ClrEx
</UL>

<P><STRONG><a name="[81]"></a>UARTx_RXSTA_RXEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_RXSTA_RXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f6]"></a>UARTx_SPBRG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_SPBRG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fc]"></a>UARTx_TXBUFSTA_TX_INTSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXBUFSTA_TX_INTSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[96]"></a>UARTx_TXREG_Write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXREG_Write))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_Frame
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETIM2_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>UARTx_TXSTA_IREN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_IREN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>UARTx_TXSTA_STOPSEL_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_STOPSEL_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[82]"></a>UARTx_TXSTA_TXEN_Setable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_TXEN_Setable))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[fb]"></a>UARTx_TXSTA_TXIS_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33g0xx_uart.o(i.UARTx_TXSTA_TXIS_Set))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ff]"></a>Uart_Init_Macro</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, bsp_init.o(i.Uart_Init_Macro))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Uart_Init_Macro &rArr; API_Uartx_Init &rArr; UART_IRModulation_Init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>Uart_Proc</STRONG> (Thumb, 492 bytes, Stack size 552 bytes, uart.o(i.Uart_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = Uart_Proc &rArr; Flsah_Write_String &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flsah_Write_String
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase_Sector
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Erase_Sector
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCRC16_CCITT
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitChange
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>Uart_RXErr_Proc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(i.Uart_RXErr_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_RXErr_Proc &rArr; Uart_RxErr_ClrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ClrEx
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RxErr_ChkEx
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RX_Frame
</UL>

<P><STRONG><a name="[104]"></a>Uart_RxErr_ChkEx</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart.o(i.Uart_RxErr_ChkEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_RxErr_ChkEx
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_PERR_Chk
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_OERR_Chk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_FERR_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RXErr_Proc
</UL>

<P><STRONG><a name="[105]"></a>Uart_RxErr_ClrEx</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.Uart_RxErr_ClrEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart_RxErr_ClrEx
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_PERR_Clr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_OERR_Clr
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_RXSTA_FERR_Clr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_RXErr_Proc
</UL>

<P><STRONG><a name="[7d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RX_Frame
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Uartx_Init
</UL>

<P><STRONG><a name="[10c]"></a>__lzo_init_v2</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, minilzo.o(i.__lzo_init_v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __lzo_init_v2 &rArr; _lzo_config_check &rArr; lzo_memops_get_ne32
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minilzo_decompress
</UL>

<P><STRONG><a name="[10e]"></a>__myfree</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, malloc.o(i.__myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadOpen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadClose
</UL>

<P><STRONG><a name="[110]"></a>__mymalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, malloc.o(i.__mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadOpen
</UL>

<P><STRONG><a name="[10d]"></a>_lzo_config_check</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, minilzo.o(i._lzo_config_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lzo_config_check &rArr; lzo_memops_get_ne32
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u2p
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_ne32
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_ne16
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_le32
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_memops_get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lzo_init_v2
</UL>

<P><STRONG><a name="[4e]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, myprintf.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[117]"></a>bspatch</STRONG> (Thumb, 322 bytes, Stack size 96 bytes, bspatch.o(i.bspatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bspatch &rArr; patchAddDiff &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offtin
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[12f]"></a>camper</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, bsp_lib.o(i.camper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = camper
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
</UL>

<P><STRONG><a name="[38]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, myprintf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>judgeSize</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, patchflash.o(i.judgeSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = judgeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[11f]"></a>lzo1x_decompress_safe</STRONG> (Thumb, 648 bytes, Stack size 24 bytes, minilzo.o(i.lzo1x_decompress_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lzo1x_decompress_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minilzo_decompress
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, bootmain.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = main &rArr; Uart_Proc &rArr; Flsah_Write_String &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init_Macro
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_System
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Etim2
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flsah_Write_String
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10f]"></a>mem_free</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, malloc.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
</UL>

<P><STRONG><a name="[3a]"></a>mem_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, malloc.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>mem_malloc</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, malloc.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
</UL>

<P><STRONG><a name="[3b]"></a>mem_perused</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, malloc.o(i.mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_perused
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>minilzo_decompress</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, gylzo.o(i.minilzo_decompress))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = minilzo_decompress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo1x_decompress_safe
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lzo_init_v2
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
</UL>

<P><STRONG><a name="[11a]"></a>myLzoRead</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, gylzo.o(i.myLzoRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = myLzoRead &rArr; mylzo_d &rArr; minilzo_decompress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mylzo_d
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lzo_read
</UL>

<P><STRONG><a name="[122]"></a>myLzoReadClose</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gylzo.o(i.myLzoReadClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myLzoReadClose &rArr; __myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[123]"></a>myLzoReadOpen</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, gylzo.o(i.myLzoReadOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = myLzoReadOpen &rArr; __mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[120]"></a>mylzo_d</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, gylzo.o(i.mylzo_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = mylzo_d &rArr; minilzo_decompress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minilzo_decompress
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzoCRC
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoRead
</UL>

<P><STRONG><a name="[11c]"></a>mymemset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, malloc.o(i.mymemset))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[125]"></a>patch</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, bspatch.o(i.patch))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = patch &rArr; bspatch &rArr; patchAddDiff &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchGetAdr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadOpen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoReadClose
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeSize
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LzoCRC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspatch
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offtin
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
</UL>

<P><STRONG><a name="[119]"></a>patchAddDiff</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, patchflash.o(i.patchAddDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = patchAddDiff &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mymalloc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__myfree
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspatch
</UL>

<P><STRONG><a name="[12a]"></a>patchFlashAddData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, patchflash.o(i.patchFlashAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patchFlashAddData
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_PREQ_Set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Clr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSIF_PRDIF_Chk
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
</UL>

<P><STRONG><a name="[12b]"></a>patchFlashEnd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, patchflash.o(i.patchFlashEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patchFlashEnd &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
</UL>

<P><STRONG><a name="[129]"></a>patchFlashErase</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, patchflash.o(i.patchFlashErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = patchFlashErase &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchGetAdr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
</UL>

<P><STRONG><a name="[12c]"></a>patchFlashStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, patchflash.o(i.patchFlashStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = patchFlashStart &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PERCLK_SetableEx
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EPCON_PREQ_Set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FLSKEY_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
</UL>

<P><STRONG><a name="[12d]"></a>patchFlashWDog</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, patchflash.o(i.patchFlashWDog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = patchFlashWDog
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Clr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
</UL>

<P><STRONG><a name="[121]"></a>patchFlashWrite</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, patchflash.o(i.patchFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = patchFlashWrite &rArr; patchFlashStart &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWDog
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashStart
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashEnd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchAddDiff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoRead
</UL>

<P><STRONG><a name="[126]"></a>patchGetAdr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, patchflash.o(i.patchGetAdr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = patchGetAdr &rArr; patchFlashErase &rArr; RCC_PERCLK_SetableEx
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>

<P><STRONG><a name="[12e]"></a>patchGotoAPP</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, patchflash.o(i.patchGotoAPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = patchGotoAPP &rArr; Flsah_Write_String &rArr; FLASH_Prog_ByteString
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flsah_Write_String
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchUpGrade
</UL>

<P><STRONG><a name="[11b]"></a>patchUpGrade</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, patchflash.o(i.patchUpGrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = patchUpGrade &rArr; patch &rArr; bspatch &rArr; patchAddDiff &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Erase_Sector
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchGotoAPP
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashErase
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patchFlashWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[93]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bootmain.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeinitSystem
</UL>

<P><STRONG><a name="[cf]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_core.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
</UL>

<P><STRONG><a name="[c9]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, bsp_core.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_SysTick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SET
</UL>

<P><STRONG><a name="[39]"></a>lzo_read</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bspatch.o(i.lzo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lzo_read &rArr; myLzoRead &rArr; mylzo_d &rArr; minilzo_decompress &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myLzoRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bspatch.o(i.patch)
</UL>
<P><STRONG><a name="[118]"></a>offtin</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, bspatch.o(i.offtin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = offtin
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bspatch
</UL>

<P><STRONG><a name="[114]"></a>lzo_memops_get_le16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_le16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_le16
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[116]"></a>lzo_memops_get_le32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_le32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[113]"></a>lzo_memops_get_ne16</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_ne16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_ne16
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[115]"></a>lzo_memops_get_ne32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, minilzo.o(i.lzo_memops_get_ne32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lzo_memops_get_ne32
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[112]"></a>u2p</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, minilzo.o(i.u2p))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lzo_config_check
</UL>

<P><STRONG><a name="[61]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[60]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[37]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[74]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6f]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[55]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[56]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
